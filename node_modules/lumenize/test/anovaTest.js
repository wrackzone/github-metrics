// Generated by CoffeeScript 1.7.1
(function() {
  var anova, approximatelyEqual, data, groups;

  anova = require('../').anova;

  data = [
    {
      group: 'A',
      value: 1
    }, {
      group: 'A',
      value: 2
    }, {
      group: 'A',
      value: 3
    }, {
      group: 'A',
      value: 4
    }, {
      group: 'B',
      value: 11
    }, {
      group: 'B',
      value: 22
    }, {
      group: 'B',
      value: 33
    }, {
      group: 'C',
      value: 45
    }, {
      group: 'C',
      value: 2
    }
  ];

  groups = [
    {
      label: 'group 1',
      predicate: function(row) {
        return row.group === 'A';
      }
    }, {
      label: 'group 2',
      predicate: function(row) {
        return row.group === 'B';
      }
    }, {
      label: 'group 3',
      predicate: function(row) {
        return row.group === 'C';
      }
    }
  ];

  approximatelyEqual = function(a, b, error) {
    if (error == null) {
      error = 0.001;
    }
    return Math.abs(a - b) < error;
  };

  exports.anovaTest = {
    basicTest: function(test) {
      var errorDF, errorMS, errorSS, factorDF, factorF, factorMS, factorP, factorSS, histogram, pooledStandardDeviation, rSquared, rSquaredAdjusted, residualPlot, results, totalDF, totalSS;
      results = anova(data, void 0, 'value', groups);
      factorDF = results.factorDF, factorSS = results.factorSS, factorMS = results.factorMS, factorF = results.factorF, factorP = results.factorP, errorDF = results.errorDF, errorSS = results.errorSS, errorMS = results.errorMS, totalDF = results.totalDF, totalSS = results.totalSS, rSquared = results.rSquared, rSquaredAdjusted = results.rSquaredAdjusted, residualPlot = results.residualPlot, histogram = results.histogram, pooledStandardDeviation = results.pooledStandardDeviation;
      console.log(results);
      test.equal(factorDF, 2);
      test.equal(factorSS, 900.5);
      test.equal(factorMS, 450.25);
      test.ok(approximatelyEqual(factorF, 2.31, 0.01));
      test.ok(approximatelyEqual(factorP, 0.180335));
      test.equal(errorDF, 6);
      test.equal(errorSS, 1171.5);
      test.equal(errorMS, 195.25);
      test.equal(totalDF, 8);
      test.equal(totalSS, 2072);
      test.ok(approximatelyEqual(rSquared, 0.4346));
      test.ok(approximatelyEqual(rSquaredAdjusted, 0.2461));
      return test.done();
    }
  };

}).call(this);
