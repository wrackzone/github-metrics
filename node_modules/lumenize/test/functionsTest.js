// Generated by CoffeeScript 1.7.1
(function() {
  var functions;

  functions = require('../').functions;

  exports.functionsTest = {
    testExpandMetrics: function(test) {
      var expected, metrics;
      metrics = [
        {
          f: 'average',
          field: 'a'
        }, {
          f: 'variance',
          field: 'b'
        }, {
          f: 'standardDeviation',
          field: 'c'
        }
      ];
      functions.expandMetrics(metrics);
      expected = [
        {
          "metric": "sumSquares",
          "field": "c",
          "as": "c_sumSquares",
          f: functions.sumSquares
        }, {
          "metric": "sum",
          "field": "c",
          "as": "c_sum",
          f: functions.sum
        }, {
          "metric": "sumSquares",
          "field": "b",
          "as": "b_sumSquares",
          f: functions.sumSquares
        }, {
          "metric": "sum",
          "field": "b",
          "as": "b_sum",
          f: functions.sum
        }, {
          "metric": "sum",
          "field": "a",
          "as": "a_sum",
          f: functions.sum
        }, {
          "metric": "count",
          "field": "",
          "as": "_count",
          f: functions.count
        }, {
          "metric": "average",
          "field": "a",
          "as": "a_average",
          f: functions.average
        }, {
          "metric": "variance",
          "field": "b",
          "as": "b_variance",
          f: functions.variance
        }, {
          "metric": "standardDeviation",
          "field": "c",
          "as": "c_standardDeviation",
          f: functions.standardDeviation
        }
      ];
      test.deepEqual(expected, metrics);
      return test.done();
    },
    testExpandMetricsWithSomeExisting: function(test) {
      var metrics;
      metrics = [
        {
          f: 'values',
          field: 'a'
        }, {
          f: 'p50',
          field: 'a'
        }
      ];
      functions.expandMetrics(metrics);
      test.equal(2, metrics.length);
      return test.done();
    },
    testExpandMetricsWithBadOrder: function(test) {
      var f, metrics;
      metrics = [
        {
          f: 'average',
          field: 'a'
        }, {
          f: 'sum',
          field: 'a'
        }
      ];
      f = function() {
        return functions.expandMetrics(metrics);
      };
      test.throws(f, Error);
      return test.done();
    },
    testMissingCount: function(test) {
      var metrics;
      metrics = functions.expandMetrics(void 0, true);
      test.deepEqual(metrics, [
        {
          metric: 'count',
          field: '',
          f: functions.count,
          as: '_count',
          metric: 'count'
        }
      ]);
      return test.done();
    },
    testAsProvided: function(test) {
      var metrics;
      metrics = [
        {
          as: 'scope',
          field: 'a',
          f: 'sum'
        }
      ];
      functions.expandMetrics(metrics);
      test.equal('scope', metrics[0].as);
      return test.done();
    },
    testFunction: function(test) {
      var f, metrics, myFunc;
      myFunc = function() {
        return 'hello';
      };
      metrics = [
        {
          f: myFunc,
          field: 'hello'
        }
      ];
      f = function() {
        return functions.expandMetrics(metrics);
      };
      test.throws(f);
      metrics = [
        {
          f: myFunc,
          as: 'hello',
          field: 'hello'
        }
      ];
      functions.expandMetrics(metrics, void 0, true);
      test.deepEqual(metrics[1].f.dependencies, ['values']);
      test.equal(metrics.length, 2);
      return test.done();
    },
    testPercentile: function(test) {
      var p50, values;
      p50 = functions.percentileCreator(50);
      values = [1, 10, 11, 55];
      test.equal(p50(values), 10.5);
      test.equal(functions.percentileCreator(95)([14]), 14);
      test.equal(functions.percentileCreator(95)([14, 15, 16]), 15.9);
      test.equal(functions.percentileCreator(100)([14, 15, 16]), 16);
      test.equal(functions.percentileCreator(95)([14, 15]), 14.95);
      return test.done();
    },
    testSum: function(test) {
      test.equal(functions.sum([0]), 0);
      test.equal(functions.sum([-1, 0, 1, -2]), -2);
      test.equal(functions.sum([]), 0);
      return test.done();
    },
    testSumSquares: function(test) {
      test.equal(functions.sumSquares([0]), 0);
      test.equal(functions.sumSquares([0, 1, 2]), 5);
      test.equal(functions.sumSquares([-2, -1, 0, 1, 2]), 10);
      test.equal(functions.sumSquares([]), 0);
      return test.done();
    },
    testSumCubes: function(test) {
      test.equal(functions.sumCubes([3]), 27);
      test.equal(functions.sumCubes([1, 2]), 9);
      test.equal(functions.sumCubes([0, 5]), 125);
      return test.done();
    },
    testProduct: function(test) {
      test.equal(functions.product([3, 7]), 21);
      test.equal(functions.product([1, 2]), 2);
      test.equal(functions.product([0, 5]), 0);
      return test.done();
    },
    testLastValue: function(test) {
      test.equal(functions.lastValue([0]), 0);
      test.equal(functions.lastValue([]), null);
      test.equal(functions.lastValue([-2, 0, 2]), 2);
      return test.done();
    },
    testFirstValue: function(test) {
      test.equal(functions.firstValue([0]), 0);
      test.equal(functions.firstValue([]), null);
      test.equal(functions.firstValue([-2, 0, 2]), -2);
      return test.done();
    },
    testCount: function(test) {
      test.equal(functions.count([0]), 1);
      test.equal(functions.count([]), 0);
      test.equal(functions.count([-2, 0, 2]), 3);
      return test.done();
    },
    testMin: function(test) {
      test.equal(functions.min([0]), 0);
      test.equal(functions.min([]), null);
      test.equal(functions.min([-2, 0, 2]), -2);
      return test.done();
    },
    testMax: function(test) {
      test.equal(functions.max([0]), 0);
      test.equal(functions.max([]), null);
      test.equal(functions.max([-2, 0, 2]), 2);
      return test.done();
    },
    testValues: function(test) {
      test.equal(functions.values([1, 2, 3, 4, 5]).length, [1, 2, 3, 4, 5].length);
      test.equal(functions.values([1, 2, 3, 4, 5], [15], [6, 7, 8, 9, 10]).length, [15, 6, 7, 8, 9, 10].length);
      return test.done();
    },
    testAverage: function(test) {
      test.equal(functions.average([0]), 0);
      test.equal(functions.average([-2, -1, 0, 1, 2]), 0);
      return test.done();
    },
    testVariance: function(test) {
      test.equal(functions.variance([-2, -1.5, 0, 1, 2.5]), 3.375);
      return test.done();
    },
    testPercentileCreator: function(test) {
      var values;
      values = [-2, -1, 0, 1, 2];
      test.equal(functions.percentileCreator(50)(values), 0);
      return test.done();
    },
    testPercentileCreatorEven: function(test) {
      var values;
      values = [-2, -1, 1, 2];
      test.equal(functions.percentileCreator(50)(values), 0);
      return test.done();
    },
    testPercentileCreator: function(test) {
      var values;
      values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      test.equal(functions.percentileCreator(99.9)(values), 9.991);
      test.equal(functions.percentileCreator(50)(values), 5.5);
      return test.done();
    },
    testPercentileCreatorDecimals: function(test) {
      var values;
      values = [1.5, 2.7, 3.4, 4.5, 5.0, 6.7, 7.8, 8.5, 9.1, 10.2];
      test.equal(functions.percentileCreator(50)(values), 5.85);
      return test.done();
    },
    testPercentileCreatorDecimalsOdd: function(test) {
      var values;
      values = [1.5, 2.7, 3.4, 4.5, 5.0, 6.7, 7.8, 8.5, 9.1, 10.2, 11.7];
      test.equal(functions.percentileCreator(50)(values), 6.7);
      return test.done();
    },
    testStandardDeviation: function(test) {
      var values;
      values = [9, 11, 10];
      test.equal(functions.standardDeviation(values), 1);
      return test.done();
    }
  };

}).call(this);
