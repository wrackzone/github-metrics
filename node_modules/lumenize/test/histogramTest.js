// Generated by CoffeeScript 1.7.1
(function() {
  var histogram, lumenize, rows, utils;

  lumenize = require('../');

  histogram = lumenize.histogram;

  utils = require('tztime').utils;

  rows = [
    {
      age: 7
    }, {
      age: 25
    }, {
      age: 23
    }, {
      age: 27
    }, {
      age: 34
    }, {
      age: 55
    }, {
      age: 42
    }, {
      age: 13
    }, {
      age: 11
    }, {
      age: 23
    }, {
      age: 31
    }, {
      age: 32
    }, {
      age: 29
    }, {
      age: 16
    }, {
      age: 31
    }, {
      age: 22
    }, {
      age: 25
    }
  ];

  exports.histogramTest = {
    testControlledBucketing: function(test) {
      var b, buckets, index, _i, _len;
      buckets = histogram.buckets([], null, null, 1, 0, 100, 100);
      test.equal(buckets.length, 100);
      for (index = _i = 0, _len = buckets.length; _i < _len; index = ++_i) {
        b = buckets[index];
        test.equal(b.index, index);
      }
      test.equal(10, histogram.bucket(10.234, buckets).index);
      test.equal(null, histogram.bucket(100, buckets));
      return test.done();
    },
    testCalculatedBucketing: function(test) {
      var buckets, counts, expected, h, h2, row;
      buckets = histogram.buckets(rows, 'age', null, 1);
      expected = [
        {
          index: 0,
          startOn: null,
          endBelow: 16,
          label: '< 16'
        }, {
          index: 1,
          startOn: 16,
          endBelow: 25,
          label: '16-25'
        }, {
          index: 2,
          startOn: 25,
          endBelow: 34,
          label: '25-34'
        }, {
          index: 3,
          startOn: 34,
          endBelow: 43,
          label: '34-43'
        }, {
          index: 4,
          startOn: 43,
          endBelow: null,
          label: '>= 43'
        }
      ];
      test.deepEqual(expected, buckets);
      test.equal(0, histogram.bucket(10.234, buckets).index);
      test.equal(0, histogram.bucket(-1234567, buckets).index);
      test.equal(2, histogram.bucket(25, buckets).index);
      test.equal(2, histogram.bucket(25.24, buckets).index);
      test.equal(4, histogram.bucket(1234567, buckets).index);
      h = histogram.histogramFromBuckets(rows, 'age', buckets);
      counts = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = h.length; _i < _len; _i++) {
          row = h[_i];
          _results.push(row.count);
        }
        return _results;
      })();
      expected = [3, 4, 7, 2, 1];
      test.deepEqual(counts, expected);
      h2 = histogram.histogram(rows, 'age', null, 1);
      test.deepEqual(h, h2);
      return test.done();
    },
    testBy10: function(test) {
      var buckets, expected;
      buckets = histogram.buckets(rows, 'age', null, 10);
      expected = [
        {
          index: 0,
          startOn: null,
          endBelow: 10,
          label: '< 10'
        }, {
          index: 1,
          startOn: 10,
          endBelow: 20,
          label: '10-20'
        }, {
          index: 2,
          startOn: 20,
          endBelow: 30,
          label: '20-30'
        }, {
          index: 3,
          startOn: 30,
          endBelow: 40,
          label: '30-40'
        }, {
          index: 4,
          startOn: 40,
          endBelow: null,
          label: '>= 40'
        }
      ];
      test.deepEqual(expected, buckets);
      return test.done();
    },
    testConstantDepth: function(test) {
      var counts, h, row, values;
      values = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500];
      h = histogram.histogram(values, null, histogram.bucketsConstantDepth, 1, null, null, 3);
      counts = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = h.length; _i < _len; _i++) {
          row = h[_i];
          _results.push(row.count);
        }
        return _results;
      })();
      test.deepEqual([5, 5, 5], counts);
      return test.done();
    },
    testPercentile: function(test) {
      var buckets, c, counts, h, i, row, values, _i, _j, _k, _l, _len, _len1, _m, _n;
      values = [];
      for (i = _i = 1; _i <= 50; i = ++_i) {
        values.push(i * 10 - 1000);
      }
      for (i = _j = 1; _j <= 50; i = ++_j) {
        values.push(i * 10 + 1000);
      }
      buckets = histogram.bucketsPercentile(values);
      test.equal(buckets[49].label, '-504.90000000000003-255');
      h = histogram.histogramFromBuckets(values, null, buckets);
      counts = (function() {
        var _k, _len, _results;
        _results = [];
        for (_k = 0, _len = h.length; _k < _len; _k++) {
          row = h[_k];
          _results.push(row.count);
        }
        return _results;
      })();
      for (_k = 0, _len = counts.length; _k < _len; _k++) {
        c = counts[_k];
        test.equal(c, 1);
      }
      values = [];
      for (i = _l = 1; _l <= 100; i = ++_l) {
        values.push(i * 10 - 1000);
      }
      for (i = _m = 1; _m <= 100; i = ++_m) {
        values.push(i * 10 + 1000);
      }
      buckets = histogram.bucketsPercentile(values);
      h = histogram.histogramFromBuckets(values, null, buckets);
      counts = (function() {
        var _len1, _n, _results;
        _results = [];
        for (_n = 0, _len1 = h.length; _n < _len1; _n++) {
          row = h[_n];
          _results.push(row.count);
        }
        return _results;
      })();
      for (_n = 0, _len1 = counts.length; _n < _len1; _n++) {
        c = counts[_n];
        test.equal(c, 2);
      }
      return test.done();
    },
    testZeroAndOneRows: function(test) {
      var h;
      rows = [10];
      h = histogram.histogram(rows);
      test.equal(h[0].count, 1);
      rows = [];
      h = histogram.histogram(rows);
      test.equal(h[0].count, 0);
      return test.done();
    },
    testPercentileExample: function(test) {
      var buckets, getGrade, grades;
      grades = [
        {
          name: 'Joe',
          average: 105
        }, {
          name: 'Jeff',
          average: 104.9
        }, {
          name: 'John',
          average: 92
        }, {
          name: 'Jess',
          average: 90
        }, {
          name: 'Joseph',
          average: 87
        }, {
          name: 'Julie',
          average: 87
        }, {
          name: 'Juan',
          average: 75
        }, {
          name: 'Jill',
          average: 73
        }, {
          name: 'Jon',
          average: 71
        }, {
          name: 'Jorge',
          average: 32
        }
      ];
      histogram = require('../').histogram;
      buckets = histogram.bucketsPercentile(grades, 'average');
      getGrade = function(average, buckets) {
        var percentile;
        percentile = histogram.bucket(average, buckets).percentileHigherIsBetter;
        if (percentile >= 90) {
          return 'A';
        } else if (percentile >= 60) {
          return 'B';
        } else if (percentile >= 10) {
          return 'C';
        } else {
          return 'F';
        }
      };
      test.equal(getGrade(grades[0].average, buckets), 'A');
      test.equal(getGrade(grades[1].average, buckets), 'B');
      test.equal(getGrade(grades[2].average, buckets), 'B');
      test.equal(getGrade(grades[3].average, buckets), 'B');
      test.equal(getGrade(grades[4].average, buckets), 'C');
      test.equal(getGrade(grades[5].average, buckets), 'C');
      test.equal(getGrade(grades[6].average, buckets), 'C');
      test.equal(getGrade(grades[7].average, buckets), 'C');
      test.equal(getGrade(grades[8].average, buckets), 'C');
      test.equal(getGrade(grades[9].average, buckets), 'F');
      return test.done();
    },
    testMerge: function(test) {
      var buckets, expected, values;
      values = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2];
      buckets = histogram.buckets(values, null, histogram.bucketsConstantDepth, null, 1, 3, 3);
      expected = [
        {
          index: 0,
          startOn: 1,
          endBelow: 3,
          matchingRangeIndexStart: 0,
          matchingRangeIndexEnd: 2,
          label: '1-3'
        }
      ];
      test.deepEqual(buckets, expected);
      buckets = histogram.buckets(values, null, histogram.bucketsConstantDepth, null, 1, 3, 4);
      expected = [
        {
          index: 0,
          startOn: 1,
          endBelow: 3,
          matchingRangeIndexStart: 0,
          matchingRangeIndexEnd: 3,
          label: '1-3'
        }
      ];
      test.deepEqual(buckets, expected);
      values = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2];
      buckets = histogram.buckets(values, null, histogram.bucketsConstantDepth, null, null, null, 3);
      expected = [
        {
          index: 0,
          startOn: null,
          endBelow: 2,
          label: '< 2'
        }, {
          index: 1,
          startOn: 2,
          endBelow: null,
          matchingRangeIndexStart: 1,
          matchingRangeIndexEnd: 2,
          label: '>= 2'
        }
      ];
      test.deepEqual(buckets, expected);
      return test.done();
    }
  };

}).call(this);
