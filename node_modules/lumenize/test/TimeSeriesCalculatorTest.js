// Generated by CoffeeScript 1.7.1
(function() {
  var Time, TimeSeriesCalculator, arrayOfMaps_To_CSVStyleArray, csvStyleArray_To_ArrayOfMaps, snapshots, snapshotsCSV, utils, _ref, _ref1;

  _ref = require('../'), TimeSeriesCalculator = _ref.TimeSeriesCalculator, csvStyleArray_To_ArrayOfMaps = _ref.csvStyleArray_To_ArrayOfMaps, arrayOfMaps_To_CSVStyleArray = _ref.arrayOfMaps_To_CSVStyleArray;

  _ref1 = require('tztime'), Time = _ref1.Time, utils = _ref1.utils;

  snapshotsCSV = [["ObjectID", "_ValidFrom", "_ValidTo", "ScheduleState", "PlanEstimate", "TaskRemainingTotal", "TaskEstimateTotal"], [1, "2010-10-10T15:00:00.001Z", "2011-01-02T13:00:00.001Z", "Ready to pull", 5, 15, 15], [1, "2011-01-02T13:00:00.001Z", "2011-01-02T15:10:00.001Z", "Ready to pull", 5, 15, 15], [1, "2011-01-02T15:10:00.001Z", "2011-01-03T15:00:00.001Z", "In progress", 5, 20, 15], [2, "2011-01-02T15:00:00.002Z", "2011-01-03T15:00:00.002Z", "Ready to pull", 3, 5, 5], [3, "2011-01-02T15:00:00.003Z", "2011-01-03T15:00:00.003Z", "Ready to pull", 5, 12, 12], [2, "2011-01-03T15:00:00.002Z", "2011-01-04T15:00:00.002Z", "In progress", 3, 5, 5], [3, "2011-01-03T15:00:00.003Z", "2011-01-04T15:00:00.003Z", "Ready to pull", 5, 12, 12], [4, "2011-01-03T15:00:00.004Z", "2011-01-04T15:00:00.004Z", "Ready to pull", 5, 15, 15], [1, "2011-01-03T15:10:00.001Z", "2011-01-04T15:00:00.001Z", "In progress", 5, 12, 15], [1, "2011-01-04T15:00:00.001Z", "2011-01-06T15:00:00.001Z", "Accepted", 5, 0, 15], [2, "2011-01-04T15:00:00.002Z", "2011-01-06T15:00:00.002Z", "In test", 3, 1, 5], [3, "2011-01-04T15:00:00.003Z", "2011-01-05T15:00:00.003Z", "In progress", 5, 10, 12], [4, "2011-01-04T15:00:00.004Z", "2011-01-06T15:00:00.004Z", "Ready to pull", 5, 15, 15], [5, "2011-01-04T15:00:00.005Z", "2011-01-06T15:00:00.005Z", "Ready to pull", 2, 4, 4], [3, "2011-01-05T15:00:00.003Z", "2011-01-07T15:00:00.003Z", "In test", 5, 5, 12], [1, "2011-01-06T15:00:00.001Z", "2011-01-07T15:00:00.001Z", "Released", 5, 0, 15], [2, "2011-01-06T15:00:00.002Z", "2011-01-07T15:00:00.002Z", "Accepted", 3, 0, 5], [4, "2011-01-06T15:00:00.004Z", "2011-01-07T15:00:00.004Z", "In progress", 5, 7, 15], [5, "2011-01-06T15:00:00.005Z", "2011-01-07T15:00:00.005Z", "Ready to pull", 2, 4, 4], [1, "2011-01-07T15:00:00.001Z", "9999-01-01T00:00:00.001Z", "Released", 5, 0, 15], [2, "2011-01-07T15:00:00.002Z", "9999-01-01T00:00:00.002Z", "Released", 3, 0, 5], [3, "2011-01-07T15:00:00.003Z", "9999-01-01T00:00:00.003Z", "Accepted", 5, 0, 12], [4, "2011-01-07T15:00:00.004Z", "9999-01-01T00:00:00.004Z", "In test", 5, 3, 15]];

  snapshots = csvStyleArray_To_ArrayOfMaps(snapshotsCSV);

  exports.TimeSeriesCalculatorTest = {
    testBasic: function(test) {
      var calculator, config, deriveFieldsAfterSummary, deriveFieldsOnInput, expected, granularity, holidays, metrics, startOnISOString, summaryMetricsConfig, tz, upToDateISOString;
      granularity = Time.DAY;
      tz = 'America/Chicago';
      holidays = [
        {
          year: 2011,
          month: 1,
          day: 5
        }
      ];
      deriveFieldsOnInput = [
        {
          as: 'AcceptedStoryCount',
          f: function(row) {
            var _ref2;
            if ((_ref2 = row.ScheduleState) === 'Accepted' || _ref2 === 'Released') {
              return 1;
            } else {
              return 0;
            }
          }
        }, {
          as: 'AcceptedStoryPoints',
          f: function(row) {
            var _ref2;
            if ((_ref2 = row.ScheduleState) === 'Accepted' || _ref2 === 'Released') {
              return row.PlanEstimate;
            } else {
              return 0;
            }
          }
        }
      ];
      metrics = [
        {
          as: 'StoryUnitScope',
          field: 'PlanEstimate',
          f: 'sum'
        }, {
          as: 'StoryCountScope',
          f: 'count'
        }, {
          as: 'StoryCountBurnUp',
          field: 'AcceptedStoryCount',
          f: 'sum'
        }, {
          as: 'StoryUnitBurnUp',
          field: 'AcceptedStoryPoints',
          f: 'sum'
        }, {
          as: 'TaskUnitBurnDown',
          field: 'TaskRemainingTotal',
          f: 'sum'
        }, {
          as: 'TaskUnitScope',
          field: 'TaskEstimateTotal',
          f: 'sum'
        }
      ];
      summaryMetricsConfig = [
        {
          field: 'TaskUnitScope',
          f: 'max'
        }, {
          field: 'TaskUnitBurnDown',
          f: 'max'
        }, {
          as: 'TaskUnitBurnDown_max_index',
          f: function(seriesData, summaryMetrics) {
            var index, row, _i, _len;
            for (index = _i = 0, _len = seriesData.length; _i < _len; index = ++_i) {
              row = seriesData[index];
              if (row.TaskUnitBurnDown === summaryMetrics.TaskUnitBurnDown_max) {
                return index;
              }
            }
          }
        }
      ];
      deriveFieldsAfterSummary = [
        {
          as: 'Ideal',
          f: function(row, index, summaryMetrics, seriesData) {
            var incrementAmount, increments, max;
            max = summaryMetrics.TaskUnitScope_max;
            increments = seriesData.length - 1;
            incrementAmount = max / increments;
            return Math.floor(100 * (max - index * incrementAmount)) / 100;
          }
        }, {
          as: 'Ideal2',
          f: function(row, index, summaryMetrics, seriesData) {
            var incrementAmount, increments, max;
            if (index < summaryMetrics.TaskUnitBurnDown_max_index) {
              return null;
            } else {
              max = summaryMetrics.TaskUnitBurnDown_max;
              increments = seriesData.length - 1 - summaryMetrics.TaskUnitBurnDown_max_index;
              incrementAmount = max / increments;
              return Math.floor(100 * (max - (index - summaryMetrics.TaskUnitBurnDown_max_index) * incrementAmount)) / 100;
            }
          }
        }
      ];
      config = {
        deriveFieldsOnInput: deriveFieldsOnInput,
        metrics: metrics,
        summaryMetricsConfig: summaryMetricsConfig,
        deriveFieldsAfterSummary: deriveFieldsAfterSummary,
        granularity: granularity,
        tz: tz,
        holidays: holidays,
        workDays: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday'
      };
      calculator = new TimeSeriesCalculator(config);
      startOnISOString = new Time('2011-01-01').getISOStringInTZ(tz);
      upToDateISOString = new Time('2011-01-09').getISOStringInTZ(tz);
      calculator.addSnapshots(snapshots, startOnISOString, upToDateISOString);
      expected = {
        "seriesData": [
          {
            "tick": "2011-01-03T06:00:00.000Z",
            "StoryUnitScope": 13,
            "StoryCountScope": 3,
            "StoryCountBurnUp": 0,
            "StoryUnitBurnUp": 0,
            "TaskUnitBurnDown": 37,
            "TaskUnitScope": 32,
            "label": "2011-01-02",
            "Ideal": 51,
            "Ideal2": null
          }, {
            "tick": "2011-01-04T06:00:00.000Z",
            "StoryUnitScope": 18,
            "StoryCountScope": 4,
            "StoryCountBurnUp": 0,
            "StoryUnitBurnUp": 0,
            "TaskUnitBurnDown": 44,
            "TaskUnitScope": 47,
            "label": "2011-01-03",
            "Ideal": 40.79,
            "Ideal2": 44
          }, {
            "tick": "2011-01-06T06:00:00.000Z",
            "StoryUnitScope": 20,
            "StoryCountScope": 5,
            "StoryCountBurnUp": 1,
            "StoryUnitBurnUp": 5,
            "TaskUnitBurnDown": 25,
            "TaskUnitScope": 51,
            "label": "2011-01-04",
            "Ideal": 30.6,
            "Ideal2": 33
          }, {
            "tick": "2011-01-07T06:00:00.000Z",
            "StoryUnitScope": 20,
            "StoryCountScope": 5,
            "StoryCountBurnUp": 2,
            "StoryUnitBurnUp": 8,
            "TaskUnitBurnDown": 16,
            "TaskUnitScope": 51,
            "label": "2011-01-06",
            "Ideal": 20.4,
            "Ideal2": 22
          }, {
            "tick": "2011-01-09T06:00:00.000Z",
            "StoryUnitScope": 18,
            "StoryCountScope": 4,
            "StoryCountBurnUp": 3,
            "StoryUnitBurnUp": 13,
            "TaskUnitBurnDown": 3,
            "TaskUnitScope": 47,
            "label": "2011-01-07",
            "Ideal": 10.2,
            "Ideal2": 11
          }, {
            "tick": "2011-01-10T06:00:00.000Z",
            "StoryUnitScope": 18,
            "StoryCountScope": 4,
            "StoryCountBurnUp": 3,
            "StoryUnitBurnUp": 13,
            "TaskUnitBurnDown": 3,
            "TaskUnitScope": 47,
            "label": "2011-01-09",
            "Ideal": 0,
            "Ideal2": 0
          }
        ],
        "summaryMetrics": {
          "TaskUnitScope_max": 51,
          "TaskUnitBurnDown_max": 44,
          "TaskUnitBurnDown_max_index": 1
        },
        projections: {}
      };
      test.deepEqual(calculator.getResults(), expected);
      return test.done();
    },
    testIncremental: function(test) {
      var calculator, calculator2, config, config2, deriveFieldsOnInput, granularity, holidays, metrics, startOnISOString, tz, upToDateISOString;
      granularity = Time.DAY;
      tz = 'America/Chicago';
      holidays = [
        {
          year: 2011,
          month: 1,
          day: 5
        }
      ];
      deriveFieldsOnInput = [
        {
          as: 'AcceptedStoryCount',
          f: function(row) {
            var _ref2;
            if ((_ref2 = row.ScheduleState) === 'Accepted' || _ref2 === 'Released') {
              return 1;
            } else {
              return 0;
            }
          }
        }, {
          as: 'AcceptedStoryPoints',
          f: function(row) {
            var _ref2;
            if ((_ref2 = row.ScheduleState) === 'Accepted' || _ref2 === 'Released') {
              return row.PlanEstimate;
            } else {
              return 0;
            }
          }
        }
      ];
      metrics = [
        {
          as: 'StoryUnitScope',
          field: 'PlanEstimate',
          f: 'sum'
        }, {
          as: 'StoryCountScope',
          f: 'count'
        }, {
          as: 'StoryCountBurnUp',
          field: 'AcceptedStoryCount',
          f: 'sum'
        }, {
          as: 'StoryUnitBurnUp',
          field: 'AcceptedStoryPoints',
          f: 'sum'
        }, {
          as: 'TaskUnitBurnDown',
          field: 'TaskRemainingTotal',
          f: 'sum'
        }, {
          as: 'TaskUnitScope',
          field: 'TaskEstimateTotal',
          f: 'sum'
        }
      ];
      config = {
        deriveFieldsOnInput: deriveFieldsOnInput,
        metrics: metrics,
        granularity: granularity,
        tz: tz,
        holidays: holidays,
        workDays: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday'
      };
      config2 = utils.clone(config);
      calculator = new TimeSeriesCalculator(config);
      startOnISOString = new Time('2011-01-03').getISOStringInTZ(tz);
      upToDateISOString = new Time('2011-01-10').getISOStringInTZ(tz);
      calculator.addSnapshots(snapshots, startOnISOString, upToDateISOString);
      calculator2 = new TimeSeriesCalculator(config2);
      startOnISOString = new Time('2011-01-03').getISOStringInTZ(tz);
      upToDateISOString = new Time('2011-01-05').getISOStringInTZ(tz);
      calculator2.addSnapshots(snapshots.slice(0, 9), startOnISOString, upToDateISOString);
      startOnISOString = upToDateISOString;
      upToDateISOString = new Time('2011-01-10').getISOStringInTZ(tz);
      calculator2.addSnapshots(snapshots.slice(5), startOnISOString, upToDateISOString);
      test.deepEqual(calculator.getResults(), calculator2.getResults());
      return test.done();
    },
    testFilteredCountAndSum: function(test) {
      var acceptedValues, calculator, config, expected, holidays, metrics, startOnISOString, upToDateISOString;
      acceptedValues = ['Accepted', 'Released'];
      metrics = [
        {
          as: 'StoryCountBurnUp',
          f: 'filteredCount',
          filterField: 'ScheduleState',
          filterValues: acceptedValues
        }, {
          as: 'StoryUnitBurnUp',
          field: 'PlanEstimate',
          f: 'filteredSum',
          filterField: 'ScheduleState',
          filterValues: acceptedValues
        }
      ];
      holidays = [
        {
          year: 2011,
          month: 1,
          day: 5
        }
      ];
      config = {
        metrics: metrics,
        granularity: Time.DAY,
        tz: 'America/Chicago',
        holidays: holidays,
        workDays: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday'
      };
      calculator = new TimeSeriesCalculator(config);
      startOnISOString = new Time('2011-01-01').getISOStringInTZ(config.tz);
      upToDateISOString = new Time('2011-01-09').getISOStringInTZ(config.tz);
      calculator.addSnapshots(snapshots, startOnISOString, upToDateISOString);
      expected = {
        seriesData: [
          {
            tick: '2011-01-03T06:00:00.000Z',
            StoryCountBurnUp: 0,
            StoryUnitBurnUp: 0,
            label: '2011-01-02'
          }, {
            tick: '2011-01-04T06:00:00.000Z',
            StoryCountBurnUp: 0,
            StoryUnitBurnUp: 0,
            label: '2011-01-03'
          }, {
            tick: '2011-01-06T06:00:00.000Z',
            StoryCountBurnUp: 1,
            StoryUnitBurnUp: 5,
            label: '2011-01-04'
          }, {
            tick: '2011-01-07T06:00:00.000Z',
            StoryCountBurnUp: 2,
            StoryUnitBurnUp: 8,
            label: '2011-01-06'
          }, {
            tick: '2011-01-09T06:00:00.000Z',
            StoryCountBurnUp: 3,
            StoryUnitBurnUp: 13,
            label: '2011-01-07'
          }, {
            tick: '2011-01-10T06:00:00.000Z',
            StoryCountBurnUp: 3,
            StoryUnitBurnUp: 13,
            label: '2011-01-09'
          }
        ],
        summaryMetrics: {},
        projections: {}
      };
      test.deepEqual(calculator.getResults(), expected);
      return test.done();
    },
    testGroupBy: function(test) {
      var a, allowedValues, calculator, config, csv, expected, holidays, keys, metrics, startOnISOString, upToDateISOString;
      allowedValues = ['Ready to pull', 'In progress', 'In test', 'Accepted', 'Released'];
      metrics = [
        {
          f: 'groupBySum',
          field: 'PlanEstimate',
          groupByField: 'ScheduleState',
          allowedValues: allowedValues
        }, {
          f: 'groupByCount',
          groupByField: 'ScheduleState',
          allowedValues: allowedValues,
          prefix: 'Count '
        }, {
          as: 'MedianTaskRemainingTotal',
          field: 'TaskRemainingTotal',
          f: 'median'
        }
      ];
      holidays = [
        {
          year: 2011,
          month: 1,
          day: 5
        }
      ];
      config = {
        metrics: metrics,
        granularity: Time.DAY,
        tz: 'America/Chicago',
        holidays: holidays,
        workDays: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday'
      };
      calculator = new TimeSeriesCalculator(config);
      startOnISOString = new Time('2010-12-31').getISOStringInTZ(config.tz);
      upToDateISOString = new Time('2011-01-09').getISOStringInTZ(config.tz);
      calculator.addSnapshots(snapshots, startOnISOString, upToDateISOString);
      keys = ['label'].concat(allowedValues);
      csv = arrayOfMaps_To_CSVStyleArray(calculator.getResults().seriesData, keys);
      expected = [['2010-12-31', 5, 0, 0, 0, 0], ['2011-01-02', 8, 5, 0, 0, 0], ['2011-01-03', 10, 8, 0, 0, 0], ['2011-01-04', 7, 0, 8, 5, 0], ['2011-01-06', 2, 5, 5, 3, 5], ['2011-01-07', 0, 0, 5, 5, 8], ['2011-01-09', 0, 0, 5, 5, 8]];
      test.deepEqual(csv.slice(1), expected);
      keys = ['label'].concat((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = allowedValues.length; _i < _len; _i++) {
          a = allowedValues[_i];
          _results.push('Count ' + a);
        }
        return _results;
      })());
      csv = arrayOfMaps_To_CSVStyleArray(calculator.getResults().seriesData, keys);
      expected = [['2010-12-31', 1, 0, 0, 0, 0], ['2011-01-02', 2, 1, 0, 0, 0], ['2011-01-03', 2, 2, 0, 0, 0], ['2011-01-04', 2, 0, 2, 1, 0], ['2011-01-06', 1, 1, 1, 1, 1], ['2011-01-07', 0, 0, 1, 1, 2], ['2011-01-09', 0, 0, 1, 1, 2]];
      test.deepEqual(csv.slice(1), expected);
      return test.done();
    },
    testSmall: function(test) {
      var calculator, config, expected, granularity, metrics, oneRowOfSnapshots, startOnISOString, tz, upToDateISOString;
      granularity = Time.DAY;
      tz = 'America/Chicago';
      metrics = [
        {
          as: 'StoryUnitScope',
          field: 'PlanEstimate',
          f: 'sum'
        }
      ];
      config = {
        metrics: metrics,
        granularity: granularity,
        tz: tz
      };
      calculator = new TimeSeriesCalculator(config);
      startOnISOString = new Time('2011-01-03').getISOStringInTZ(tz);
      upToDateISOString = new Time('2011-01-10').getISOStringInTZ(tz);
      oneRowOfSnapshots = snapshots.slice(7, 8);
      calculator.addSnapshots(oneRowOfSnapshots, startOnISOString, upToDateISOString);
      expected = {
        tick: '2011-01-04T06:00:00.000Z',
        StoryUnitScope: 5,
        label: '2011-01-03'
      };
      test.deepEqual(calculator.getResults().seriesData[0], expected);
      return test.done();
    },
    testTimezoneBoundaries: function(test) {
      var calculator, config, csvStyleArray, expected, startOnISOString, upToDateISOString;
      csvStyleArray = [["ObjectID", "_ValidFrom", "_ValidTo", "Value"], [1, "2011-01-04T01:00:00.000Z", "2011-01-05T04:59:59.999Z", 10], [1, "2011-01-05T04:59:59.999Z", "2011-01-06T05:00:00.000Z", 5], [1, "2011-01-06T05:00:00.000Z", "2011-01-07T15:00:00.000Z", 3], [1, "2011-01-07T15:00:00.000Z", "9999-01-01T00:00:00.000Z", 2]];
      snapshots = csvStyleArray_To_ArrayOfMaps(csvStyleArray);
      config = {
        granularity: Time.DAY,
        tz: "America/New_York",
        metrics: [
          {
            field: 'Value',
            f: 'sum'
          }
        ]
      };
      calculator = new TimeSeriesCalculator(config);
      startOnISOString = new Time("2011-01-02").getISOStringInTZ(config.tz);
      upToDateISOString = new Time("2011-01-10").getISOStringInTZ(config.tz);
      calculator.addSnapshots(snapshots, startOnISOString, upToDateISOString);
      expected = [['tick', 'Value_sum', 'label'], ['2011-01-04T05:00:00.000Z', 10, '2011-01-03'], ['2011-01-05T05:00:00.000Z', 5, '2011-01-04'], ['2011-01-06T05:00:00.000Z', 3, '2011-01-05'], ['2011-01-07T05:00:00.000Z', 3, '2011-01-06'], ['2011-01-10T05:00:00.000Z', 2, '2011-01-07'], ['2011-01-11T05:00:00.000Z', 2, '2011-01-10']];
      test.deepEqual(arrayOfMaps_To_CSVStyleArray(calculator.getResults().seriesData), expected);
      return test.done();
    },
    testMasterTicksAndLabels: function(test) {
      var calculator, config, expected, r, results;
      config = {
        startOn: "2010-12-29",
        endBefore: "2011-01-07",
        granularity: Time.DAY,
        tz: "America/New_York",
        metrics: [
          {
            field: 'Value',
            f: 'sum'
          }
        ]
      };
      calculator = new TimeSeriesCalculator(config);
      expected = [
        {
          tick: '2010-12-30T05:00:00.000Z',
          label: '2010-12-29'
        }, {
          tick: '2010-12-31T05:00:00.000Z',
          label: '2010-12-30'
        }, {
          tick: '2011-01-03T05:00:00.000Z',
          label: '2010-12-31'
        }, {
          tick: '2011-01-04T05:00:00.000Z',
          label: '2011-01-03'
        }, {
          tick: '2011-01-05T05:00:00.000Z',
          label: '2011-01-04'
        }, {
          tick: '2011-01-06T05:00:00.000Z',
          label: '2011-01-05'
        }, {
          tick: '2011-01-07T05:00:00.000Z',
          label: '2011-01-06'
        }
      ];
      results = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = calculator.getResults().seriesData;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          r = _ref2[_i];
          _results.push({
            tick: r.tick,
            label: r.label
          });
        }
        return _results;
      })();
      test.deepEqual(results, expected);
      return test.done();
    },
    testIncrementalTicksAndLabels: function(test) {
      var calculator, config, csvStyleArray, expected, r, results, startOnISOString, upToDateISOString;
      csvStyleArray = [["ObjectID", "_ValidFrom", "_ValidTo", "Value"], [1, "2011-01-03T01:00:00.000Z", "2011-01-04T04:59:59.999Z", 10], [1, "2011-01-04T04:59:59.999Z", "2011-01-05T05:00:00.000Z", 5], [1, "2011-01-05T05:00:00.000Z", "2011-01-06T15:00:00.000Z", 3], [1, "2011-01-06T15:00:00.000Z", "9999-01-01T00:00:00.000Z", 2]];
      snapshots = csvStyleArray_To_ArrayOfMaps(csvStyleArray);
      config = {
        granularity: Time.DAY,
        tz: "America/New_York",
        metrics: [
          {
            field: 'Value',
            f: 'sum'
          }
        ]
      };
      calculator = new TimeSeriesCalculator(config);
      startOnISOString = new Time("2010-12-29").getISOStringInTZ(config.tz);
      upToDateISOString = new Time("2011-01-06").getISOStringInTZ(config.tz);
      calculator.addSnapshots(snapshots, startOnISOString, upToDateISOString);
      expected = [
        {
          tick: '2010-12-30T05:00:00.000Z',
          label: '2010-12-29'
        }, {
          tick: '2010-12-31T05:00:00.000Z',
          label: '2010-12-30'
        }, {
          tick: '2011-01-03T05:00:00.000Z',
          label: '2010-12-31'
        }, {
          tick: '2011-01-04T05:00:00.000Z',
          label: '2011-01-03'
        }, {
          tick: '2011-01-05T05:00:00.000Z',
          label: '2011-01-04'
        }, {
          tick: '2011-01-06T05:00:00.000Z',
          label: '2011-01-05'
        }, {
          tick: '2011-01-07T05:00:00.000Z',
          label: '2011-01-06'
        }
      ];
      results = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = calculator.getResults().seriesData;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          r = _ref2[_i];
          _results.push({
            tick: r.tick,
            label: r.label
          });
        }
        return _results;
      })();
      test.deepEqual(results, expected);
      return test.done();
    },
    testClampingToMasterTimeline: function(test) {
      var calculator, config, csvStyleArray, expected, r, startOnISOString, upToDateISOString, values;
      csvStyleArray = [["ObjectID", "_ValidFrom", "_ValidTo", "Value"], [1, "2009-01-01T12:00:00.000Z", "2013-01-01T12:00:00.000Z", 1], [2, "2009-01-01T12:00:00.000Z", "2011-06-01T12:00:00.000Z", 2], [3, "2011-06-01T12:00:00.000Z", "2011-08-01T12:00:00.000Z", 3], [4, "2011-06-01T12:00:00.000Z", "2013-01-01T12:00:00.000Z", 4], [5, "2009-01-01T12:00:00.000Z", "2009-03-01T12:00:00.000Z", 5], [6, "2013-01-01T12:00:00.000Z", "2013-03-01T12:00:00.000Z", 6]];
      snapshots = csvStyleArray_To_ArrayOfMaps(csvStyleArray);
      config = {
        granularity: Time.MONTH,
        tz: "America/New_York",
        metrics: [
          {
            as: 'values',
            field: 'ObjectID',
            f: 'values'
          }
        ]
      };
      calculator = new TimeSeriesCalculator(config);
      startOnISOString = new Time("2011-01-01").getISOStringInTZ(config.tz);
      upToDateISOString = new Time("2011-12-31").getISOStringInTZ(config.tz);
      calculator.addSnapshots(snapshots, startOnISOString, upToDateISOString);
      expected = [
        {
          label: '2011-01',
          values: [1, 2]
        }, {
          label: '2011-02',
          values: [1, 2]
        }, {
          label: '2011-03',
          values: [1, 2]
        }, {
          label: '2011-04',
          values: [1, 2]
        }, {
          label: '2011-05',
          values: [1, 2]
        }, {
          label: '2011-06',
          values: [1, 3, 4]
        }, {
          label: '2011-07',
          values: [1, 3, 4]
        }, {
          label: '2011-08',
          values: [1, 4]
        }, {
          label: '2011-09',
          values: [1, 4]
        }, {
          label: '2011-10',
          values: [1, 4]
        }, {
          label: '2011-11',
          values: [1, 4]
        }, {
          label: '2011-12',
          values: [1, 4]
        }
      ];
      values = (function() {
        var _i, _len, _ref2, _results;
        _ref2 = calculator.getResults().seriesData;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          r = _ref2[_i];
          _results.push({
            label: r.label,
            values: r.values
          });
        }
        return _results;
      })();
      test.deepEqual(values, expected);
      return test.done();
    }
  };

}).call(this);
