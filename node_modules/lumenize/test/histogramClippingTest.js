// Generated by CoffeeScript 1.7.1
(function() {
  var histogram, lumenize, utils;

  lumenize = require('../');

  histogram = lumenize.histogram.clipping;

  utils = require('tztime').utils;

  exports.histogramTest = {
    testHistogram: function(test) {
      var b, buckets, chartMax, clipped, expected, histogramResults, idx, row, rows, valueMax, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4;
      rows = [
        {
          age: 7
        }, {
          age: 25
        }, {
          age: 23
        }, {
          age: 27
        }, {
          age: 34
        }, {
          age: 55
        }, {
          age: 42
        }, {
          age: 13
        }, {
          age: 11
        }, {
          age: 23
        }, {
          age: 31
        }, {
          age: 32
        }, {
          age: 29
        }, {
          age: 16
        }, {
          age: 31
        }, {
          age: 22
        }, {
          age: 25
        }
      ];
      histogramResults = histogram(rows, 'age');
      buckets = histogramResults.buckets, chartMax = histogramResults.chartMax, clipped = histogramResults.clipped, valueMax = histogramResults.valueMax;
      expected = [
        {
          label: '0-12',
          count: 2
        }, {
          label: '12-24',
          count: 5
        }, {
          label: '24-36',
          count: 8
        }, {
          label: '36-48',
          count: 1
        }, {
          label: '48-60',
          count: 1
        }
      ];
      for (idx = _i = 0, _len = buckets.length; _i < _len; idx = ++_i) {
        b = buckets[idx];
        test.ok(utils.match(expected[idx], b));
        _ref = b.rows;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          row = _ref[_j];
          test.equal(row.age, row.clippedChartValue);
        }
      }
      test.equal(buckets[0].rows[0].age, 7);
      rows.push({
        age: 85
      });
      _ref1 = histogram(rows, 'age'), buckets = _ref1.buckets, chartMax = _ref1.chartMax, clipped = _ref1.clipped;
      expected = [
        {
          label: '0-12',
          count: 2
        }, {
          label: '12-24',
          count: 5
        }, {
          label: '24-36',
          count: 8
        }, {
          label: '36-48',
          count: 1
        }, {
          label: '48-86*',
          count: 2
        }
      ];
      for (idx = _k = 0, _len2 = buckets.length; _k < _len2; idx = ++_k) {
        b = buckets[idx];
        test.ok(utils.match(expected[idx], b));
        _ref2 = b.rows;
        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
          row = _ref2[_l];
          if (b.label.indexOf('*') === -1) {
            test.equal(row.age, row.clippedChartValue);
          } else {
            test.equal(row.age === row.clippedChartValue, false);
            test.ok(row.clippedChartValue <= chartMax);
          }
        }
      }
      _ref3 = histogram(rows, 'age', true), buckets = _ref3.buckets, chartMax = _ref3.chartMax, clipped = _ref3.clipped;
      expected = [
        {
          label: '0-22',
          count: 4
        }, {
          label: '22-44',
          count: 12
        }, {
          label: '44-66',
          count: 1
        }, {
          label: '66-88',
          count: 1
        }, {
          label: '88-110',
          count: 0
        }
      ];
      for (idx = _m = 0, _len4 = buckets.length; _m < _len4; idx = ++_m) {
        b = buckets[idx];
        test.ok(utils.match(expected[idx], b));
        _ref4 = b.rows;
        for (_n = 0, _len5 = _ref4.length; _n < _len5; _n++) {
          row = _ref4[_n];
          if (b.label.indexOf('*') === -1) {
            test.equal(row.age, row.clippedChartValue);
          } else {
            test.equal(row.age === row.clippedChartValue, false);
            test.ok(row.clippedChartValue <= chartMax);
          }
        }
      }
      return test.done();
    },
    testOneRow: function(test) {
      var histogramResults, rows;
      rows = [
        {
          age: 7
        }
      ];
      histogramResults = histogram(rows, 'age');
      test.equal(histogramResults.bucketSize, 4);
      return test.done();
    },
    testZeroRows: function(test) {
      var histogramResults, rows;
      rows = [];
      histogramResults = histogram(rows, 'age');
      test.equal(histogramResults.bucketSize, 1);
      return test.done();
    }
  };

}).call(this);
