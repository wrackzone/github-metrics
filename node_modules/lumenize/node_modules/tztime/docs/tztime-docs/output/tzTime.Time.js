Ext.data.JsonP.tzTime_Time({"tagname":"class","name":"tzTime.Time","autodetected":{},"files":[{"filename":"Time.coffee.js","href":"Time.coffee.html#tzTime-Time"}],"members":[{"name":"segments","tagname":"cfg","owner":"tzTime.Time","id":"static-cfg-segments","meta":{"static":true}},{"name":"constructor","tagname":"method","owner":"tzTime.Time","id":"method-constructor","meta":{}},{"name":"add","tagname":"method","owner":"tzTime.Time","id":"method-add","meta":{}},{"name":"addInPlace","tagname":"method","owner":"tzTime.Time","id":"method-addInPlace","meta":{"chainable":true}},{"name":"daysInMonth","tagname":"method","owner":"tzTime.Time","id":"method-daysInMonth","meta":{}},{"name":"decrement","tagname":"method","owner":"tzTime.Time","id":"method-decrement","meta":{"chainable":true}},{"name":"dowNumber","tagname":"method","owner":"tzTime.Time","id":"method-dowNumber","meta":{}},{"name":"dowString","tagname":"method","owner":"tzTime.Time","id":"method-dowString","meta":{}},{"name":"equal","tagname":"method","owner":"tzTime.Time","id":"method-equal","meta":{}},{"name":"getISOStringInTZ","tagname":"method","owner":"tzTime.Time","id":"method-getISOStringInTZ","meta":{}},{"name":"getJSDate","tagname":"method","owner":"tzTime.Time","id":"method-getJSDate","meta":{}},{"name":"getJSDateInTZfromGMT","tagname":"method","owner":"tzTime.Time","id":"method-getJSDateInTZfromGMT","meta":{}},{"name":"getSegmentsAsArray","tagname":"method","owner":"tzTime.Time","id":"method-getSegmentsAsArray","meta":{}},{"name":"getSegmentsAsObject","tagname":"method","owner":"tzTime.Time","id":"method-getSegmentsAsObject","meta":{}},{"name":"granularityAboveDay","tagname":"method","owner":"tzTime.Time","id":"method-granularityAboveDay","meta":{"private":true}},{"name":"greaterThan","tagname":"method","owner":"tzTime.Time","id":"method-greaterThan","meta":{}},{"name":"greaterThanOrEqual","tagname":"method","owner":"tzTime.Time","id":"method-greaterThanOrEqual","meta":{}},{"name":"inGranularity","tagname":"method","owner":"tzTime.Time","id":"method-inGranularity","meta":{}},{"name":"increment","tagname":"method","owner":"tzTime.Time","id":"method-increment","meta":{"chainable":true}},{"name":"is53WeekYear","tagname":"method","owner":"tzTime.Time","id":"method-is53WeekYear","meta":{}},{"name":"isLeapYear","tagname":"method","owner":"tzTime.Time","id":"method-isLeapYear","meta":{}},{"name":"lessThan","tagname":"method","owner":"tzTime.Time","id":"method-lessThan","meta":{}},{"name":"lessThanOrEqual","tagname":"method","owner":"tzTime.Time","id":"method-lessThanOrEqual","meta":{}},{"name":"rataDieNumber","tagname":"method","owner":"tzTime.Time","id":"method-rataDieNumber","meta":{}},{"name":"toString","tagname":"method","owner":"tzTime.Time","id":"method-toString","meta":{}},{"name":"getISOStringFromJSDate","tagname":"method","owner":"tzTime.Time","id":"static-method-getISOStringFromJSDate","meta":{"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-tzTime.Time","short_doc":"Basic usage\n\n{TimelineIterator, Timeline, Time} = require('../')\n\n\nGet Time objects from partial ISOStrings. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Time.coffee.html#tzTime-Time' target='_blank'>Time.coffee.js</a></div></pre><div class='doc-contents'><h2>Basic usage</h2>\n\n<pre><code>{TimelineIterator, Timeline, Time} = require('../')\n</code></pre>\n\n<p>Get Time objects from partial ISOStrings. The granularity is automatically inferred from how many segments you provide.</p>\n\n<pre><code>d1 = new Time('2011-02-28')\nconsole.log(d1.toString())\n# 2011-02-28\n</code></pre>\n\n<p>Spell it all out with a JavaScript object</p>\n\n<pre><code>d2 = new Time({granularity: Time.DAY, year: 2011, month: 3, day: 1})\nconsole.log(d2.toString())\n# 2011-03-01\n</code></pre>\n\n<p>Increment/decrement and compare Times without regard to timezone</p>\n\n<pre><code>console.log(d1.greaterThanOrEqual(d2))\n# false\n\nd1.increment()\nconsole.log(d1.equal(d2))\n# true\n</code></pre>\n\n<p>Do math on them.</p>\n\n<pre><code>d3 = d1.add(5)\nconsole.log(d3.toString())\n# 2011-03-06\n</code></pre>\n\n<p>Get the day of the week.</p>\n\n<pre><code>console.log(d3.dowString())\n# Sunday\n</code></pre>\n\n<p>Subtraction is just addition with negative numbers.</p>\n\n<pre><code>d3.addInPlace(-6)\nconsole.log(d3.toString())\n# 2011-02-28\n</code></pre>\n\n<p>If you start on the last day of a month, adding a month takes you to the last day of the next month,\neven if the number of days are different.</p>\n\n<pre><code>d3.addInPlace(1, 'month')  \nconsole.log(d3.toString())\n# 2011-03-31\n</code></pre>\n\n<p>Deals well with year-granularity math and leap year complexity.</p>\n\n<pre><code>d4 = new Time('2004-02-29')  # leap day\nd4.addInPlace(1, 'year')  # adding a year takes us to a non-leap year\nconsole.log(d4.toString())\n# 2005-02-28\n</code></pre>\n\n<p>Week granularity correctly wraps and deals with 53-week years.</p>\n\n<pre><code>w1 = new Time('2004W53-6')\nconsole.log(w1.inGranularity(Time.DAY).toString())\n# 2005-01-01\n</code></pre>\n\n<p>Convert between any of the standard granularities. Also converts custom granularities (not shown) to\nstandard granularities if you provide a <code>rataDieNumber()</code> function with your custom granularities.</p>\n\n<pre><code>d5 = new Time('2005-01-01')  # goes the other direction also\nconsole.log(d5.inGranularity('week_day').toString())\n# 2004W53-6\n\nq1 = new Time('2011Q3')\nconsole.log(q1.inGranularity(Time.MILLISECOND).toString())\n# 2011-07-01T00:00:00.000\n</code></pre>\n\n<h2>Timezones</h2>\n\n<p>Time does timezone sensitive conversions.</p>\n\n<pre><code>console.log(new Time('2011-01-01').getJSDate('America/Denver').toISOString())\n# 2011-01-01T07:00:00.000Z\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='static-cfg-segments' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-static-cfg-segments' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-static-cfg-segments' class='name expandable'>segments</a> : String[]<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>an Array identifying the ancestry (e.g. ...</div><div class='long'><p>an Array identifying the ancestry (e.g. for 'day', it is: <code>['year', 'month', 'day']</code>)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>granularitySpec</span> : Object<div class='sub-desc'><p>see Time.<em>granularitySpecs for existing granularitySpecs</p>\n</div></li></ul></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/tzTime.Time-method-constructor' class='name expandable'>tzTime.Time</a>( <span class='pre'>value, [granularity], [tz]</span> ) : <a href=\"#!/api/tzTime.Time\" rel=\"tzTime.Time\" class=\"docClass\">tzTime.Time</a><span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object/Number/Date/String<div class='sub-desc'>\n</div></li><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li><li><span class='pre'>tz</span> : String (optional)<div class='sub-desc'><p>The constructor for Time supports the passing in of a String, a rata die number (RDN), or a config Object</p>\n\n<h2>String</h2>\n\n<p>There are two kinds of strings that can be passed into the constructor:</p>\n\n<ol>\n<li>Human strings relative to now (e.g. \"this day\", \"previous month\", \"next quarter\", \"this millisecond in Pacific/Fiji\", etc.)</li>\n<li>ISO-8601 or custom masked (e.g. \"I03D10\" - 10th day of 3rd iteration)</li>\n</ol>\n\n\n<h2>Human strings relative to now</h2>\n\n<p>The string must be in the form <code>(this, previous, next) |granularity| [in |timezone|]</code></p>\n\n<p>Examples</p>\n\n<ul>\n<li><code>this day</code> today</li>\n<li><code>next month</code> next month</li>\n<li><code>this day in Pacific/Fiji</code> the day that it currently is in Fiji</li>\n<li><code>previous hour in America/New_York</code> the hour before the current hour in New York</li>\n<li><code>next quarter</code> next quarter</li>\n<li><code>previous week</code> last week</li>\n</ul>\n\n\n<h2>ISO-8601 or custom masked</h2>\n\n<p>When you pass in an ISO-8601 or custom mask string, Time uses the masks that are defined for each granularity to figure out the granularity...\nunless you explicitly provide a granularity. This parser works on all valid ISO-8601 forms except orginal dates (e.g. <code>\"2012-288\"</code>)\nIt even supports week number form (<code>\"2009W52-7\"</code>) and we've added a form for Quarter granularity (e.g. <code>\"2009Q4\"</code>).\nThe canonical form (<code>\"2009-01-01T12:34:56.789\"</code>) will work as will any shortened subset of it (<code>\"2009-01-01\"</code>,\n<code>\"2009-01-01T12:34\"</code>, etc.). Plus it will even parse strings in whatever custom granularity you provide based\nupon the mask that you provide for that granularity.</p>\n\n<p>If the granularity is specified but not all of the segments are provided, Time will fill in the missing value\nwith the <code>lowest</code> value from _granularitySpecs.</p>\n\n<p>The ISO forms that omit the delimiters or use spaces as the delimeters are not supported. Also unsupported are strings\nwith a time shift indicator on the end (<code>...+05:00</code>). However, if you pass in a string with a \"Z\" at the end, Time\nwill assume that you want to convert from GMT to local (abstract) time and you must provide a timezone.</p>\n\n<p>There are two special Strings that are recognized: <code>BEFORE_FIRST</code> and <code>PAST_LAST</code>. You must provide a granularity if you\nare instantiating a Time with these values. They are primarily used for custom granularities where your users\nmay mistakenly request charts for iterations and releases that have not yet been defined. They are particularly useful when\nyou want to iterate to the last defined iteration/release.</p>\n\n<h2>Rata Die Number</h2>\n\n<p>The <strong>rata die number (RDN)</strong> for a date is the number of days since 0001-01-01. You will probably never work\ndirectly with this number but it's what Time uses to convert between granularities. When you are instantiating\na Time from an RDN, you must provide a granularity. Using RDN will work even for the granularities finer than day.\nTime will populate the finer grained segments (hour, minute, etc.) with the approriate <code>lowest</code> value.</p>\n\n<h2>Date</h2>\n\n<p>You can also pass in a JavaScript Date() Object. The passing in of a tz with this option doesn't make sense. You'll end\nup with the same Time value no matter what because the JS Date() already sorta has a timezone. I'm not sure if this\noption is even really useful. In most cases, you are probably better off using Time.getISOStringFromJSDate()</p>\n\n<h2>Object</h2>\n\n<p>You can also explicitly spell out the segments in a specification Object in the form of\n<code>{granularity: Time.DAY, year: 2009, month: 1, day: 1}</code>. If the granularity is specified but not all of the segments are\nprovided, Time will fill in the missing value with the appropriate <code>lowest</code> value from _granularitySpecs.</p>\n\n<h2>granularity</h2>\n\n<p>If you provide a granularity it will take precedence over whatever fields you've provided in your config or whatever segments\nyou have provided in your string. Time will leave off extra values and fill in missing ones with the appropriate <code>lowest</code>\nvalue.</p>\n\n<h2>tz</h2>\n\n<p>Most of the time, Time assumes that any dates you pass in are timezone less. You'll specify Christmas as 12-25, then you'll\nshift the boundaries of Christmas for a specific timezone for boundary comparison.</p>\n\n<p>However, if you provide a tz parameter to this constructor, Time will assume you are passing in a true GMT date/time and shift into\nthe provided timezone. So...</p>\n\n<pre><code>d = new Time('2011-01-01T02:00:00:00.000Z', Time.DAY, 'America/New_York')\nconsole.log(d.toString())\n# 2010-12-31\n</code></pre>\n\n<p>Rule of thumb on when you want to use timezones:</p>\n\n<ol>\n<li>If you have true GMT date/times and you want to create a Time, provide the timezone to this constructor.</li>\n<li>If you have abstract days like Christmas or June 10th and you want to delay the timezone consideration, don't provide a timezone to this constructor.</li>\n<li>In either case, if the dates you want to compare to are in GMT, but you've got Times or Timelines, you'll have to provide a timezone on\nthe way back out of Time/Timeline</li>\n</ol>\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/tzTime.Time\" rel=\"tzTime.Time\" class=\"docClass\">tzTime.Time</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-add' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-add' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-add' class='name expandable'>add</a>( <span class='pre'>qty, [granularity]</span> ) : Time<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>qty</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Time</span><div class='sub-desc'><p>Adds (or subtracts) quantity (negative quantity) and returns a new Time. Not efficient for large qty.</p>\n\n<p>   console.log(new Time('2012-01-01').add(-10, Time.MONTH))\n   # 2011-03-01</p>\n</div></li></ul></div></div></div><div id='method-addInPlace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-addInPlace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-addInPlace' class='name expandable'>addInPlace</a>( <span class='pre'>qty, [granularity]</span> ) : Time<span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>qty</span> : Number<div class='sub-desc'><p>Can be negative for subtraction</p>\n</div></li><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Time</span><div class='sub-desc'><p>Adds qty to the Time object. It uses increment and decrement so it's not going to be efficient for large values\nof qty, but it should be fine for charts where we'll increment/decrement small values of qty.</p>\n\n<pre><code>console.log(new Time('2011-11-01').addInPlace(3, Time.MONTH).toString())\n# 2012-02-01\n</code></pre>\n</div></li></ul></div></div></div><div id='method-daysInMonth' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-daysInMonth' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-daysInMonth' class='name expandable'>daysInMonth</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns the number of days in the current month for this Time</p>\n\n<pre><code>console.log(new Time('2012-02').daysInMonth())\n# 29\n</code></pre>\n</div></li></ul></div></div></div><div id='method-decrement' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-decrement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-decrement' class='name expandable'>decrement</a>( <span class='pre'>[granularity]</span> ) : Time<span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Time</span><div class='sub-desc'><p>Decrements this by 1 in the granularity of the Time or the granularity specified if it was specified</p>\n\n<pre><code>console.log(new Time('2016W01').decrement().toString())\n# 2015W53\n</code></pre>\n</div></li></ul></div></div></div><div id='method-dowNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-dowNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-dowNumber' class='name expandable'>dowNumber</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns the day of the week as a number. Monday = 1, Sunday = 7</p>\n\n<pre><code>console.log(new Time('2012-01-01').dowNumber())\n# 7\n</code></pre>\n</div></li></ul></div></div></div><div id='method-dowString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-dowString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-dowString' class='name expandable'>dowString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>Returns the day of the week as a String (e.g. \"Monday\")</p>\n\n<pre><code>console.log(new Time('2012-01-01').dowString())\n# Sunday\n</code></pre>\n</div></li></ul></div></div></div><div id='method-equal' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-equal' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-equal' class='name expandable'>equal</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Time<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this equals other. Throws an error if the granularities don't match.</p>\n\n<pre><code>d3 = new Time({granularity: Time.DAY, year: 2011, month: 12, day: 31})\nd4 = new Time('2012-01-01').add(-1)\nconsole.log(d3.equal(d4))\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-getISOStringInTZ' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-getISOStringInTZ' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-getISOStringInTZ' class='name expandable'>getISOStringInTZ</a>( <span class='pre'>tz</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tz</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The canonical ISO-8601 date in zulu representation but shifted to the specified tz</p>\n\n<pre><code>console.log(new Time('2012-01-01').getISOStringInTZ('Europe/Berlin'))\n# 2011-12-31T23:00:00.000Z\n</code></pre>\n</div></li></ul></div></div></div><div id='method-getJSDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-getJSDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-getJSDate' class='name expandable'>getJSDate</a>( <span class='pre'>tz</span> ) : Date<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tz</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Date</span><div class='sub-desc'><p>Returns a JavaScript Date Object properly shifted. This Date Object can be compared to other Date Objects that you know\nare already in the desired timezone. If you have data that comes from an API in GMT. You can first create a Time object from\nit and then (using this getJSDate() function) you can compare it to JavaScript Date Objects created in local time.</p>\n\n<p>The full name of this function should be getJSDateInGMTasummingThisCTDateIsInTimezone(tz). It converts <strong>TO</strong> GMT\n(actually something that can be compared to GMT). It does <strong>NOT</strong> convert <strong>FROM</strong> GMT. Use getJSDateFromGMTInTZ()\nif you want to go in the other direction.</p>\n\n<h2>Usage</h2>\n\n<pre><code>ct = new Time('2011-01-01')\nd = new Date(Date.UTC(2011, 0, 1))\n\nconsole.log(ct.getJSDate('GMT').getTime() == d.getTime())\n# true\n\nconsole.log(ct.inGranularity(Time.HOUR).add(-5).getJSDate('America/New_York').getTime() == d.getTime())\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-getJSDateInTZfromGMT' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-getJSDateInTZfromGMT' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-getJSDateInTZfromGMT' class='name expandable'>getJSDateInTZfromGMT</a>( <span class='pre'>tz</span> ) : Date<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>tz</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Date</span><div class='sub-desc'><p>This assumes that the Time is an actual GMT date/time as opposed to some abstract day like Christmas and shifts\nit into the specified timezone.</p>\n\n<p>Note, this function will be off by an hour for the times near midnight on the days where there is a shift to/from daylight\nsavings time. The tz rules engine is designed to go in the other direction so we're mis-using it. This means we are using the wrong\nmoment in rules-space for that hour. The cost of fixing this issue was deemed to high for chart applications.</p>\n\n<pre><code>console.log(new Time('2012-01-01').getJSDateFromGMTInTZ('Europe/Berlin').toISOString())\n# 2012-01-01T01:00:00.000Z\n</code></pre>\n</div></li></ul></div></div></div><div id='method-getSegmentsAsArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-getSegmentsAsArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-getSegmentsAsArray' class='name expandable'>getSegmentsAsArray</a>( <span class='pre'></span> ) : Array<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Array</span><div class='sub-desc'><p>Returns a simple JavaScript Array containing the segments. This is useful for doing hierarchical\n  aggregations using Lumenize.OLAPCube.</p>\n\n<pre><code>t = new Time('2011-01-10')\nconsole.log(t.getSegmentsAsArray())\n# [ 2011, 1, 10 ]\n</code></pre>\n</div></li></ul></div></div></div><div id='method-getSegmentsAsObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-getSegmentsAsObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-getSegmentsAsObject' class='name expandable'>getSegmentsAsObject</a>( <span class='pre'></span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Returns a simple JavaScript Object containing the segments. This is useful when using utils.match\nfor holiday comparison</p>\n\n<pre><code>t = new Time('2011-01-10')\nconsole.log(t.getSegmentsAsObject())\n# { year: 2011, month: 1, day: 10 }\n</code></pre>\n</div></li></ul></div></div></div><div id='method-granularityAboveDay' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-granularityAboveDay' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-granularityAboveDay' class='name expandable'>granularityAboveDay</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if the Time Object's granularity is above (coarser than) \"day\" level</p>\n</div></li></ul></div></div></div><div id='method-greaterThan' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-greaterThan' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-greaterThan' class='name expandable'>greaterThan</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Time<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this is greater than other. Throws an error if the granularities don't match</p>\n\n<pre><code>d1 = new Time({granularity: Time.DAY, year: 2011, month: 2, day: 28})\nd2 = new Time({granularity: Time.DAY, year: 2011, month: 3, day: 1})\nconsole.log(d1.greaterThan(d2))\n# false\nconsole.log(d2.greaterThan(d1))\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-greaterThanOrEqual' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-greaterThanOrEqual' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-greaterThanOrEqual' class='name expandable'>greaterThanOrEqual</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Time<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this is greater than or equal to other</p>\n\n<pre><code>console.log(new Time('2012').greaterThanOrEqual(new Time('2012')))\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-inGranularity' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-inGranularity' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-inGranularity' class='name expandable'>inGranularity</a>( <span class='pre'>granularity</span> ) : Time<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>granularity</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Time</span><div class='sub-desc'><p>Returns a new Time object for the same date-time as this object but in the specified granularity.\nFills in missing finer granularity segments with <code>lowest</code> values. Drops segments when convernting to a coarser\ngranularity.</p>\n\n<pre><code>console.log(new Time('2012W01-1').inGranularity(Time.DAY).toString())\n# 2012-01-02\n\nconsole.log(new Time('2012Q3').inGranularity(Time.MONTH).toString())\n# 2012-07\n</code></pre>\n</div></li></ul></div></div></div><div id='method-increment' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-increment' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-increment' class='name expandable'>increment</a>( <span class='pre'>[granularity]</span> ) : Time<span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>granularity</span> : String (optional)<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Time</span><div class='sub-desc'><p>Increments this by 1 in the granularity of the Time or the granularity specified if it was specified</p>\n\n<pre><code>console.log(new Time('2012Q4').increment().toString())\n# 2013Q1\n</code></pre>\n</div></li></ul></div></div></div><div id='method-is53WeekYear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-is53WeekYear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-is53WeekYear' class='name expandable'>is53WeekYear</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is a 53-week year</p>\n\n<pre><code>console.log(new Time('2015').is53WeekYear())\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-isLeapYear' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-isLeapYear' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-isLeapYear' class='name expandable'>isLeapYear</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>true if this is a leap year</p>\n\n<pre><code>console.log(new Time('2012').isLeapYear())\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-lessThan' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-lessThan' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-lessThan' class='name expandable'>lessThan</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Time<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this is less than other</p>\n\n<pre><code>console.log(new Time(1000, Time.DAY).lessThan(new Time(999, Time.DAY)))  # Using RDN constructor\n# false\n</code></pre>\n</div></li></ul></div></div></div><div id='method-lessThanOrEqual' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-lessThanOrEqual' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-lessThanOrEqual' class='name expandable'>lessThanOrEqual</a>( <span class='pre'>other</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>other</span> : Time<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns true if this is less than or equal to other</p>\n\n<pre><code>console.log(new Time('this day').lessThanOrEqual(new Time('next day')))  # Using relative constructor\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-rataDieNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-rataDieNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-rataDieNumber' class='name expandable'>rataDieNumber</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Returns the counting number for days starting with 0001-01-01 (i.e. 0 AD). Note, this differs\nfrom the Unix Epoch which starts on 1970-01-01. This function works for\ngranularities finer than day (hour, minute, second, millisecond) but ignores the segments of finer granularity than\nday. Also called common era days.</p>\n\n<pre><code>console.log(new Time('0001-01-01').rataDieNumber())\n# 1\n\nrdn2012 = new Time('2012-01-01').rataDieNumber()\nrdn1970 = new Time('1970-01-01').rataDieNumber()\nms1970To2012 = (rdn2012 - rdn1970) * 24 * 60 * 60 * 1000\nmsJSDate2012 = Number(new Date('2012-01-01'))\nconsole.log(ms1970To2012 == msJSDate2012)\n# true\n</code></pre>\n</div></li></ul></div></div></div><div id='method-toString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-method-toString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-method-toString' class='name expandable'>toString</a>( <span class='pre'></span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>Uses granularity <code>mask</code> in _granularitySpecs to generate the string representation.</p>\n\n<pre><code>t = new Time({year: 2012, month: 1, day: 1, granularity: Time.MINUTE}).toString()\nconsole.log(t.toString())\nconsole.log(t)\n# 2012-01-01T00:00\n# 2012-01-01T00:00\n</code></pre>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-getISOStringFromJSDate' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='tzTime.Time'>tzTime.Time</span><br/><a href='source/Time.coffee.html#tzTime-Time-static-method-getISOStringFromJSDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/tzTime.Time-static-method-getISOStringFromJSDate' class='name expandable'>getISOStringFromJSDate</a>( <span class='pre'>jsDate</span> ) : String<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>jsDate</span> : Date<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>Given a JavaScript Date() Object, this will return the canonical ISO-8601 form.</p>\n\n<p>If you don't provide any parameters, it will return now, like <code>new Date()</code> except this is a zulu string.</p>\n\n<pre><code>console.log(Time.getISOStringFromJSDate(new Date(0)))\n# 1970-01-01T00:00:00.000Z\n</code></pre>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});