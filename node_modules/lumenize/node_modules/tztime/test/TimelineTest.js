// Generated by CoffeeScript 1.7.1
(function() {
  var Time, Timeline, TimelineIterator, utils, _ref;

  _ref = require('../'), Time = _ref.Time, TimelineIterator = _ref.TimelineIterator, Timeline = _ref.Timeline;

  utils = require('../src/utils');

  exports.TimelineTest = {
    testConstructor: function(test) {
      var i2, r;
      r = new Timeline({
        startOn: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 1
        }),
        endBefore: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 7
        })
      });
      test.equal(r.startOn.year, 2011, 'startOn.year should be 2011');
      test.equal(r.endBefore.day, 7, 'endBefore.day should be 7');
      i2 = new Timeline({
        startOn: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 1
        }),
        endBefore: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 3
        }),
        workDays: 'Monday ,Tuesday,Wednesday, Thursday,Saturday'
      });
      test.deepEqual(i2.workDays, ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Saturday'], 'workdays should be [M, T, W, Th, S]');
      return test.done();
    },
    testDefaults: function(test) {
      var r;
      r = new Timeline({
        startOn: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 1
        }),
        endBefore: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 7
        })
      });
      test.equal(r.step, 1, 'Default step should be 1');
      test.deepEqual(r.workDays, ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'], 'Default workdays should be [M, T, W, Th, F]');
      test.equal(r.holidays.length, 0, 'Default holidays should be length 0');
      test.ok(utils.isArray(r.holidays), 'Default holidays should be an array');
      return test.done();
    },
    testExample: function(test) {
      var i, r, r2;
      r = new Timeline({
        startOn: new Time('2011-01-02'),
        endBefore: new Time('2011-01-07'),
        holidays: [
          {
            month: 1,
            day: 1
          }, {
            year: 2011,
            month: 1,
            day: 5
          }
        ]
      });
      test.deepEqual(r.workDays, ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']);
      i = r.getIterator('Time');
      test.equal('2011-01-03', i.next());
      test.equal('2011-01-04', i.next());
      test.equal('2011-01-06', i.next());
      test.equal(i.hasNext(), false);
      r2 = new Timeline({
        startOn: new Time('2011-01-02T00'),
        endBefore: new Time('2011-01-07T00'),
        workDayStartOn: {
          hour: 9,
          minute: 0
        },
        workDayEndBefore: {
          hour: 17,
          minute: 0
        }
      });
      test.equal(r2.contains(new Time('2011-01-02T00')), true);
      test.equal(r2.contains(new Time('2011-01-07T00')), false);
      test.equal(r2.contains('2011-01-06T23'), true);
      test.equal(r2.contains('2011-01-02T03:00:00.000', 'America/New_York'), false);
      test.equal(r2.contains('2011-01-07T03:00:00.000', 'America/New_York'), true);
      return test.done();
    },
    testTimeline: function(test) {
      var all, endBefore, spec, startOn, tl2;
      spec = {
        startOn: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 1
        }),
        endBefore: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 10
        }),
        workDays: 'Monday ,   Wednesday, Thursday ,Saturday',
        holidays: [
          {
            month: 12,
            day: 25
          }, {
            month: 1,
            day: 1
          }, {
            month: 7,
            day: 4
          }, {
            year: 2011,
            month: 11,
            day: 24
          }
        ]
      };
      tl2 = new Timeline(spec);
      all = tl2.getAllRaw();
      spec.step = -1;
      tl2 = new Timeline(spec);
      test.deepEqual(tl2.getAllRaw(), all.reverse(), 'should be the same in reverse');
      all.reverse();
      delete spec.step;
      endBefore = spec.endBefore;
      delete spec.endBefore;
      spec.limit = 4;
      tl2 = new Timeline(spec);
      test.deepEqual(tl2.getAllRaw(), all, 'should be the same with limit');
      spec.endBefore = endBefore;
      startOn = spec.startOn;
      delete spec.startOn;
      spec.limit = 4;
      spec.step = -1;
      tl2 = new Timeline(spec);
      test.deepEqual(tl2.getAllRaw(), all.reverse(), 'should be the same in reverse');
      return test.done();
    },
    testSubTimeline: function(test) {
      var i3, r3, subIterator, subTimeline;
      r3 = new Timeline({
        startOn: new Time('2011-01-06'),
        endBefore: new Time('2011-01-11'),
        workDayStartOn: {
          hour: 9,
          minute: 0
        },
        workDayEndBefore: {
          hour: 11,
          minute: 0
        }
      });
      i3 = r3.getIterator('Timeline', void 0, 'hour');
      test.equal(r3.startOn, '2011-01-06');
      test.equal(r3.endBefore, '2011-01-11');
      subTimeline = i3.next();
      test.equal(subTimeline.startOn, '2011-01-06T00');
      test.equal(subTimeline.endBefore, '2011-01-07T00');
      subIterator = subTimeline.getIterator('Time');
      test.equal(subIterator.next().hour, 9);
      test.equal(subIterator.next().hour, 10);
      test.equal(subIterator.hasNext(), false);
      subTimeline = i3.next();
      test.equal(subTimeline.startOn, '2011-01-07T00');
      test.equal(subTimeline.endBefore, '2011-01-10T00');
      subIterator = subTimeline.getIterator('Time');
      test.equal(subIterator.next().hour, 9);
      test.equal(subIterator.next().hour, 10);
      test.equal(subIterator.hasNext(), false);
      subTimeline = i3.next();
      test.equal(subTimeline.startOn, '2011-01-10T00');
      test.equal(subTimeline.endBefore, '2011-01-11T00');
      subIterator = subTimeline.getIterator('Time');
      test.equal(subIterator.next().hour, 9);
      test.equal(subIterator.next().hour, 10);
      test.equal(subIterator.hasNext(), false);
      test.equal(i3.hasNext(), false);
      return test.done();
    },
    testTicksThatIntersect: function(test) {
      var ticks, tl;
      tl = new Timeline({
        startOn: '2011-01-06T00',
        endBefore: '2011-01-11T00',
        workDayStartOn: {
          hour: 9,
          minute: 0
        },
        workDayEndBefore: {
          hour: 11,
          minute: 0
        }
      });
      ticks = tl.ticksThatIntersect('2010-01-01T00:00:00.000Z', '2010-01-10T00:00:00.000Z', 'America/New_York');
      test.equal(0, ticks.length);
      ticks = tl.ticksThatIntersect('2012-01-01T00:00:00.000Z', '2012-01-10T00:00:00.000Z', 'America/New_York');
      test.equal(0, ticks.length);
      ticks = tl.ticksThatIntersect('2011-01-01T00:00:00.000Z', '2012-01-01T00:00:00.000Z', 'America/New_York');
      test.equal(6, ticks.length);
      ticks = tl.ticksThatIntersect('2011-01-07T00:00:00.000Z', '2012-01-01T00:00:00.000Z', 'America/New_York');
      test.equal(4, ticks.length);
      ticks = tl.ticksThatIntersect('2011-01-07T00:00:00.000Z', '2011-01-08T00:00:00.000Z', 'America/New_York');
      test.equal(2, ticks.length);
      ticks = tl.ticksThatIntersect(new Time('2010-01-01'), new Time('2010-01-10'));
      test.equal(0, ticks.length);
      ticks = tl.ticksThatIntersect(new Time('2012-01-01'), new Time('2012-01-10'));
      test.equal(0, ticks.length);
      ticks = tl.ticksThatIntersect(new Time('2011-01-01'), new Time('2012-01-01'));
      test.equal(6, ticks.length);
      ticks = tl.ticksThatIntersect(new Time('2011-01-07'), new Time('2012-01-01'));
      test.equal(4, ticks.length);
      ticks = tl.ticksThatIntersect(new Time('2011-01-07'), new Time('2011-01-08'));
      test.equal(2, ticks.length);
      return test.done();
    },
    testHourGranularity: function(test) {
      var i4, r4;
      r4 = new Timeline({
        startOn: '2011-01-06T00',
        endBefore: '2011-01-11T00',
        workDayStartOn: {
          hour: 9,
          minute: 0
        },
        workDayEndBefore: {
          hour: 11,
          minute: 0
        }
      });
      i4 = r4.getIterator('Time');
      test.equal('2011-01-06T09', i4.next());
      test.equal('2011-01-06T10', i4.next());
      test.equal('2011-01-07T09', i4.next());
      test.equal('2011-01-07T10', i4.next());
      test.equal('2011-01-10T09', i4.next());
      test.equal('2011-01-10T10', i4.next());
      test.equal(i4.hasNext(), false);
      return test.done();
    },
    testHours: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'hour',
          year: 2011,
          month: 1,
          day: 3,
          hour: 14
        }),
        endBefore: new Time('2011-01-04T22'),
        workDayStartOn: {
          hour: 9,
          minute: 0
        },
        workDayEndBefore: {
          hour: 17,
          minute: 0
        }
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 11, 'should be 11 work hours between these two Times');
      return test.done();
    },
    testHoursNightShift: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'hour',
          year: 2011,
          month: 1,
          day: 3,
          hour: 20
        }),
        endBefore: new Time({
          granularity: 'hour',
          hour: 8,
          year: 2011,
          month: 1,
          day: 4
        }),
        workDayStartOn: {
          hour: 23,
          minute: 0
        },
        workDayEndBefore: {
          hour: 8,
          minute: 0
        }
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 8, 'should be 8 work hours from 11pm til 7am');
      return test.done();
    },
    testHoursSpanDays: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'hour',
          year: 2011,
          month: 1,
          day: 3,
          hour: 7
        }),
        endBefore: new Time({
          granularity: 'hour',
          year: 2011,
          month: 1,
          day: 4,
          hour: 23
        }),
        workDayStartOn: {
          hour: 8,
          minute: 0
        },
        workDayEndBefore: {
          hour: 18,
          minute: 0
        }
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 20, 'should be 20 work hours');
      return test.done();
    },
    testHoursSpanWeeks: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'hour',
          year: 2011,
          month: 12,
          day: 30,
          hour: 1
        }),
        endBefore: new Time({
          granularity: 'hour',
          year: 2012,
          month: 1,
          day: 3,
          hour: 1
        })
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 48);
      return test.done();
    },
    testWorkHours: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'hour',
          year: 2012,
          month: 2,
          day: 1,
          hour: 5
        }),
        endBefore: new Time({
          granularity: 'hour',
          year: 2012,
          month: 2,
          day: 5,
          hour: 23
        }),
        workDayStartOn: {
          hour: 10,
          minute: 30
        },
        workDayEndBefore: {
          hour: 12,
          minute: 30
        }
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 6);
      return test.done();
    },
    testMinutes: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'minute',
          year: 2011,
          month: 1,
          day: 3,
          hour: 14,
          minute: 23
        }),
        endBefore: new Time('2011-01-04T22:23'),
        workDayStartOn: {
          hour: 9,
          minute: 30
        },
        workDayEndBefore: {
          hour: 17,
          minute: 15
        }
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 11 * 60 + 2 * 15 - 30 - 23, "should be " + (11 * 60 + 2 * 15 - 30 - 23) + " work minutes between these two Times");
      return test.done();
    },
    testMinutesSpanDays: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'minute',
          year: 2012,
          month: 1,
          day: 17,
          hour: 12,
          minute: 0
        }),
        endBefore: new Time({
          granularity: 'minute',
          year: 2012,
          month: 1,
          day: 18,
          hour: 12,
          minute: 0
        })
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 1440);
      return test.done();
    },
    testMinutesSpanWeeks: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'minute',
          year: 2012,
          month: 1,
          day: 20,
          hour: 12,
          minute: 0
        }),
        endBefore: new Time({
          granularity: 'minute',
          year: 2012,
          month: 1,
          day: 23,
          hour: 12,
          minute: 0
        })
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 1440);
      return test.done();
    },
    testMilliseconds: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'millisecond',
          year: 2011,
          month: 1,
          day: 3,
          hour: 14,
          minute: 23,
          second: 45,
          millisecond: 900
        }),
        endBefore: new Time({
          granularity: 'millisecond',
          year: 2011,
          month: 1,
          day: 3,
          hour: 14,
          minute: 23,
          second: 46,
          millisecond: 5
        })
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 105);
      return test.done();
    },
    testQuarter: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time({
          granularity: 'quarter',
          year: 2011,
          quarter: 1
        }),
        endBefore: new Time('2013Q3')
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 10, 'should be 10 quarters between these two Times');
      return test.done();
    },
    testDow: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time('2008W52-3'),
        endBefore: new Time({
          granularity: 'week_day',
          year: 2011,
          week: 3,
          week_day: 3
        }),
        holidays: [
          {
            month: 12,
            day: 25
          }, {
            month: 1,
            day: 1
          }, {
            month: 7,
            day: 4
          }, {
            year: 2011,
            month: 11,
            day: 24
          }
        ]
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 107 * 5 + 3 + 2 - 4, "should be " + (107 * 5 + 3 + 2 - 4) + " days between these two Times");
      return test.done();
    },
    testWeeks: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time('2008W52'),
        endBefore: new Time({
          granularity: 'week',
          year: 2011,
          week: 3
        })
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 108, 'should be #{108} days between these two Times');
      return test.done();
    },
    testDaysSpanYears: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time('2010-12-30'),
        endBefore: new Time('2011-01-15')
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 12);
      return test.done();
    },
    testWeeksSpanYears: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time('2010-11-30').inGranularity('week'),
        endBefore: new Time('2011-01-15').inGranularity('week')
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 6);
      return test.done();
    },
    testDaysSpanMonths: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time('2011-01-15'),
        endBefore: new Time('2011-02-15')
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 21);
      return test.done();
    },
    testDaysSpanWeeks: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time('2011-05-05'),
        endBefore: new Time('2011-05-25')
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 14);
      return test.done();
    },
    testQuartersSpanYears: function(test) {
      var spec, tl2;
      spec = {
        startOn: new Time('2011-10-01').inGranularity('quarter'),
        endBefore: new Time('2012-04-01').inGranularity('quarter')
      };
      tl2 = new Timeline(spec);
      test.equal(tl2.getAllRaw().length, 2);
      return test.done();
    }
  };

}).call(this);
