// Generated by CoffeeScript 1.7.1
(function() {
  var Time, Timeline, TimelineIterator, utils, _ref;

  _ref = require('../'), Time = _ref.Time, TimelineIterator = _ref.TimelineIterator, Timeline = _ref.Timeline, utils = _ref.utils;

  exports.CustomGranularityTest = {
    setUp: function(callback) {
      var granularitySpec;
      granularitySpec = {
        release: {
          segments: ['release'],
          mask: 'R##',
          lowest: 1,
          endBeforeDay: new Time('2011-07-01'),
          rolloverValue: function(ct) {
            return Time._granularitySpecs.iteration.timeBoxes.length + 1;
          },
          rataDieNumber: function(ct) {
            return Time._granularitySpecs.iteration.timeBoxes[ct.release - 1][1 - 1].startOn.rataDieNumber();
          }
        },
        iteration: {
          segments: ['release', 'iteration'],
          mask: 'R##I##',
          lowest: 1,
          endBeforeDay: new Time('2011-07-01'),
          timeBoxes: [
            [
              {
                startOn: new Time('2011-01-01'),
                label: 'R1 Iteration 1'
              }, {
                startOn: new Time('2011-02-01'),
                label: 'R1 Iteration 2'
              }, {
                startOn: new Time('2011-03-01'),
                label: 'R1 Iteration 3'
              }
            ], [
              {
                startOn: new Time('2011-04-01'),
                label: 'R2 Iteration 1'
              }, {
                startOn: new Time('2011-05-01'),
                label: 'R2 Iteration 2'
              }, {
                startOn: new Time('2011-06-01'),
                label: 'R2 Iteration 3'
              }
            ]
          ],
          rolloverValue: function(ct) {
            var numberOfReleases, temp, _ref1;
            temp = ((_ref1 = Time._granularitySpecs.iteration.timeBoxes[ct.release - 1]) != null ? _ref1.length : void 0) + 1;
            if ((temp != null) && !isNaN(temp) && ct.beforePastFlag !== 'PAST_LAST') {
              return temp;
            } else {
              numberOfReleases = Time._granularitySpecs.iteration.timeBoxes.length;
              return Time._granularitySpecs.iteration.timeBoxes[numberOfReleases - 1].length + 1;
            }
          },
          rataDieNumber: function(ct) {
            return Time._granularitySpecs.iteration.timeBoxes[ct.release - 1][ct.iteration - 1].startOn.rataDieNumber();
          }
        },
        iteration_day: {
          segments: ['release', 'iteration', 'iteration_day'],
          mask: 'R##I##-##',
          lowest: 1,
          endBeforeDay: new Time('2011-07-01'),
          rolloverValue: function(ct) {
            var iterationTimeBox, nextIteration, numberOfIterationsInLastRelease, numberOfReleases, thisIteration, _ref1;
            iterationTimeBox = (_ref1 = Time._granularitySpecs.iteration.timeBoxes[ct.release - 1]) != null ? _ref1[ct.iteration - 1] : void 0;
            if ((iterationTimeBox == null) || ct.beforePastFlag === 'PAST_LAST') {
              numberOfReleases = Time._granularitySpecs.iteration.timeBoxes.length;
              numberOfIterationsInLastRelease = Time._granularitySpecs.iteration.timeBoxes[numberOfReleases - 1].length;
              iterationTimeBox = Time._granularitySpecs.iteration.timeBoxes[numberOfReleases - 1][numberOfIterationsInLastRelease - 1];
            }
            thisIteration = iterationTimeBox.startOn.inGranularity('iteration');
            nextIteration = thisIteration.add(1);
            if (nextIteration.beforePastFlag === 'PAST_LAST') {
              return Time._granularitySpecs.iteration_day.endBeforeDay.rataDieNumber() - iterationTimeBox.startOn.rataDieNumber() + 1;
            } else {
              return nextIteration.rataDieNumber() - iterationTimeBox.startOn.rataDieNumber() + 1;
            }
          },
          rataDieNumber: function(ct) {
            return Time._granularitySpecs.iteration.timeBoxes[ct.release - 1][ct.iteration - 1].startOn.rataDieNumber() + ct.iteration_day - 1;
          }
        }
      };
      Time.addGranularity(granularitySpec);
      return callback();
    },
    testWithinIteration: function(test) {
      var i, temp;
      i = new TimelineIterator({
        startOn: new Time({
          granularity: 'iteration_day',
          release: 1,
          iteration: 1,
          iteration_day: 10
        }),
        endBefore: new Time({
          granularity: 'iteration_day',
          release: 1,
          iteration: 1,
          iteration_day: 20
        }),
        holidays: [
          {
            year: 2011,
            month: 1,
            day: 17
          }
        ],
        workDays: 'Monday, Tuesday, Wednesday, Thursday'
      });
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-01-10');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-01-11');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-01-12');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-01-13');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-01-18');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-01-19');
      test.equal(i.hasNext(), false);
      return test.done();
    },
    testSpanIteration: function(test) {
      var i, temp;
      i = new TimelineIterator({
        startOn: new Time({
          granularity: 'iteration_day',
          release: 1,
          iteration: 1,
          iteration_day: 27
        }),
        endBefore: new Time({
          granularity: 'iteration_day',
          release: 1,
          iteration: 2,
          iteration_day: 6
        }),
        holidays: [
          {
            year: 2011,
            month: 1,
            day: 17
          }
        ],
        workDays: 'Monday, Tuesday, Wednesday, Thursday'
      });
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-01-27');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-01-31');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-02-01');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-02-02');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-02-03');
      test.equal(i.hasNext(), false);
      return test.done();
    },
    testSpanRelease: function(test) {
      var i, temp;
      i = new TimelineIterator({
        startOn: new Time({
          granularity: 'iteration_day',
          release: 1,
          iteration: 3,
          iteration_day: 27
        }),
        endBefore: new Time({
          granularity: 'iteration_day',
          release: 2,
          iteration: 1,
          iteration_day: 6
        }),
        holidays: [
          {
            year: 2011,
            month: 1,
            day: 17
          }
        ],
        workDays: 'Monday, Tuesday, Wednesday, Thursday'
      });
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-03-28');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-03-29');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-03-30');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-03-31');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-04-04');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-04-05');
      test.equal(i.hasNext(), false);
      return test.done();
    },
    testBackwardFromPastLast: function(test) {
      var i, temp;
      i = new TimelineIterator({
        endBefore: new Time('PAST_LAST', 'iteration_day'),
        limit: 3,
        step: -1,
        holidays: [
          {
            year: 2011,
            month: 1,
            day: 17
          }
        ],
        workDays: 'Monday, Tuesday, Wednesday, Thursday'
      });
      temp = i.next();
      test.equal(temp, 'R02I03-30');
      temp = i.next();
      test.equal(temp, 'R02I03-29');
      temp = i.next();
      test.equal(temp, 'R02I03-28');
      test.equal(i.hasNext(), false);
      return test.done();
    },
    testBackwardFromPastLastIteration: function(test) {
      var i, temp;
      i = new TimelineIterator({
        endBefore: new Time('PAST_LAST', 'iteration'),
        limit: 4,
        step: -1,
        holidays: [
          {
            year: 2011,
            month: 1,
            day: 17
          }
        ],
        workDays: 'Monday, Tuesday, Wednesday, Thursday'
      });
      temp = i.next();
      test.equal(temp, 'R02I03');
      temp = i.next();
      test.equal(temp, 'R02I02');
      temp = i.next();
      test.equal(temp, 'R02I01');
      temp = i.next();
      test.equal(temp, 'R01I03');
      test.equal(i.hasNext(), false);
      return test.done();
    },
    testInGranularity: function(test) {
      var d;
      d = new Time('2011-05-05');
      test.equal(d.inGranularity('release'), 'R02');
      test.equal(d.inGranularity('iteration'), 'R02I02');
      test.equal(d.inGranularity('iteration_day'), 'R02I02-05');
      d = new Time('2010-05-05').inGranularity('release');
      test.equal(d, 'BEFORE_FIRST');
      d = new Time('2014-05-05').inGranularity('release');
      test.equal(d, 'PAST_LAST');
      d = new Time('2014-05-05').inGranularity('iteration_day');
      test.equal(d, 'PAST_LAST');
      d = new Time('2011-07-01').inGranularity('release');
      test.equal(d, 'PAST_LAST');
      d = new Time('2011-06-30').inGranularity('release');
      test.equal(d, 'R02');
      d = new Time('2012-07-01').inGranularity('iteration');
      test.equal(d, 'PAST_LAST');
      d = new Time('2011-06-30').inGranularity('iteration');
      test.equal(d, 'R02I03');
      d = new Time('2011-03-15').inGranularity('iteration');
      test.equal(d, 'R01I03');
      return test.done();
    },
    testAfterRelease: function(test) {
      var i, temp;
      i = new TimelineIterator({
        startOn: new Time({
          granularity: 'iteration_day',
          release: 2,
          iteration: 3,
          iteration_day: 27
        }),
        endBefore: new Time({
          granularity: 'iteration_day',
          release: 3,
          iteration: 1,
          iteration_day: 1
        }),
        holidays: [
          {
            year: 2011,
            month: 1,
            day: 17
          }
        ],
        workDays: 'Monday, Tuesday, Wednesday, Thursday'
      });
      test.equal(i.timeline.endBefore, 'PAST_LAST');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-06-27');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-06-28');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-06-29');
      temp = i.next();
      test.equal(temp.inGranularity('day'), '2011-06-30');
      test.equal(i.hasNext(), false);
      return test.done();
    },
    testMathOnPastLast: function(test) {
      var d, d2;
      d = new Time('PAST_LAST', 'iteration_day');
      d.addInPlace(-1);
      test.equal(d, 'R02I03-30');
      d = new Time('PAST_LAST', 'iteration_day');
      d.addInPlace(-3);
      test.equal(d, 'R02I03-28');
      d = new Time('PAST_LAST', 'iteration_day');
      d.decrement();
      test.equal(d, 'R02I03-30');
      d = new Time('PAST_LAST', 'iteration_day');
      d2 = d.add(-1);
      test.equal(d2, 'R02I03-30');
      d = new Time('PAST_LAST', 'iteration');
      d.decrement();
      test.equal(d, 'R02I03');
      d = new Time('PAST_LAST', 'release');
      d.decrement();
      test.equal(d, 'R02');
      d = new Time('PAST_LAST', 'release');
      d.increment();
      test.equal(d, 'PAST_LAST');
      d = new Time('PAST_LAST', 'iteration');
      d.increment();
      test.equal(d, 'PAST_LAST');
      d = new Time('PAST_LAST', 'iteration_day');
      d.increment();
      test.equal(d, 'PAST_LAST');
      return test.done();
    },
    testMathOnBeforeFirst: function(test) {
      var d, d2;
      d = new Time('BEFORE_FIRST', 'iteration_day');
      d.addInPlace(1);
      test.equal(d, 'R01I01-01');
      d = new Time('BEFORE_FIRST', 'iteration_day');
      d.addInPlace(3);
      test.equal(d, 'R01I01-03');
      d = new Time('BEFORE_FIRST', 'iteration_day');
      d.increment();
      test.equal(d, 'R01I01-01');
      d = new Time('BEFORE_FIRST', 'iteration_day');
      d2 = d.add(1);
      test.equal(d2, 'R01I01-01');
      d = new Time('BEFORE_FIRST', 'iteration');
      d.increment();
      test.equal(d, 'R01I01');
      d = new Time('BEFORE_FIRST', 'release');
      d.increment();
      test.equal(d, 'R01');
      d = new Time('BEFORE_FIRST', 'release');
      d.decrement();
      test.equal(d, 'BEFORE_FIRST');
      d = new Time('BEFORE_FIRST', 'iteration');
      d.decrement();
      test.equal(d, 'BEFORE_FIRST');
      d = new Time('BEFORE_FIRST', 'iteration_day');
      d.decrement();
      test.equal(d, 'BEFORE_FIRST');
      return test.done();
    }
  };

}).call(this);
