// Generated by CoffeeScript 1.7.1
(function() {
  var Time, Timeline, TimelineIterator, utils, _ref;

  _ref = require('../'), Time = _ref.Time, TimelineIterator = _ref.TimelineIterator, Timeline = _ref.Timeline;

  utils = require('../src/utils');

  exports.TimelineIteratorTest = {
    setUp: function(callback) {
      this.i = new TimelineIterator({
        startOn: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 1
        }),
        endBefore: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 7
        })
      });
      return callback();
    },
    testNextAndHasNext: function(test) {
      var StopIteration, f, i2, temp;
      f = function() {
        var i2;
        i2 = new TimelineIterator({
          startOn: new Time({
            granularity: 'day',
            year: 2011,
            month: 1,
            day: 1
          }),
          endBefore: new Time({
            granularity: 'day',
            year: 2011,
            month: 1,
            day: 1
          })
        });
        return i2.next();
      };
      StopIteration = typeof StopIteration === 'undefined' ? utils.StopIteration : StopIteration;
      test.throws(f, StopIteration, 'should throw on calling next() when hasNext() is false');
      i2 = new TimelineIterator({
        startOn: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 1
        }),
        endBefore: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 10
        }),
        workDays: 'Monday ,   Wednesday, Thursday ,Saturday',
        holidays: [
          {
            month: 12,
            day: 25
          }, {
            month: 1,
            day: 1
          }, {
            month: 7,
            day: 4
          }, {
            year: 2011,
            month: 11,
            day: 24
          }
        ]
      });
      temp = i2.next();
      test.equal(temp.dowString(), 'Monday', 'Should be Monday because 01-01 is a holiday and Sunday is not a workday');
      temp = i2.next();
      test.equal(temp.dowString(), 'Wednesday', 'Should be Wednesday');
      temp = i2.next();
      test.equal(temp.dowString(), 'Thursday', 'Should be Thursday');
      temp = i2.next();
      test.equal(temp.dowString(), 'Saturday', 'Should be Saturday again');
      test.equal(i2.hasNext(), false, 'Should be no more because the 2011-01-09 is Sunday which is not a workDay');
      return test.done();
    },
    testThrows: function(test) {
      var endBefore, f, spec, startOn;
      spec = {
        startOn: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 1
        }),
        endBefore: new Time({
          granularity: 'day',
          year: 2011,
          month: 1,
          day: 10
        }),
        workDays: 'Monday ,   Wednesday, Thursday ,Saturday',
        holidays: [
          {
            month: 12,
            day: 25
          }, {
            month: 1,
            day: 1
          }, {
            month: 7,
            day: 4
          }, {
            year: 2011,
            month: 11,
            day: 24
          }
        ]
      };
      f = function() {
        var i3;
        return i3 = new TimelineIterator(spec);
      };
      endBefore = spec.endBefore;
      delete spec.endBefore;
      test.throws(f, utils.AssertException, 'should throw with only startOn');
      spec.limit = 10;
      spec.step = -1;
      test.throws(f, utils.AssertException, 'should throw when no endBefore and step is negative');
      startOn = spec.startOn;
      delete spec.startOn;
      delete spec.limit;
      test.throws(f, Error, 'should throw with no startOn, endBefore, limit');
      spec.endBefore = endBefore;
      spec.limit = 10;
      spec.step = 1;
      test.throws(f, utils.AssertException, 'should throw when no startOn and step is positive');
      return test.done();
    }
  };

}).call(this);
