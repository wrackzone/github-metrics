// Generated by CoffeeScript 1.7.1
(function() {
  var multiRegression, predict;

  multiRegression = {};

  multiRegression.calculateA = function(data) {

    /*
    @method calculateA
      Calculates the coefficient matrix for gaussian elimination solution
     */
    var a, i, j, k, n, numOfVariables, _i, _j, _k, _ref, _ref1;
    numOfVariables = data[0].length;
    n = data.length;
    a = [];
    for (i = _i = 0, _ref = numOfVariables - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      a.push([]);
      for (j = _j = 0; 0 <= numOfVariables ? _j <= numOfVariables : _j >= numOfVariables; j = 0 <= numOfVariables ? ++_j : --_j) {
        a[i].push(0);
        for (k = _k = 0, _ref1 = n - 1; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; k = 0 <= _ref1 ? ++_k : --_k) {
          a[i][j] += (i === 0 ? 1 : data[k][i - 1]) * (j === 0 ? 1 : data[k][j - 1]);
        }
      }
    }
    return a;
  };

  multiRegression.swapRows = function(a, firstRowIndex, secondRowIndex) {
    var j, temp, _i, _ref, _results;
    _results = [];
    for (j = _i = 0, _ref = a[0].length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; j = 0 <= _ref ? ++_i : --_i) {
      temp = a[firstRowIndex][j];
      a[firstRowIndex][j] = a[secondRowIndex][j];
      _results.push(a[secondRowIndex][j] = temp);
    }
    return _results;
  };

  predict = function(data, inputs) {

    /*
    @method predict
    @param {[][]} data A two-dimensional array
    @param
    
    Returns a prediction of the output based upon historical data and input "estimates"
    The last column of the Data array is the value we are trying to predict. The other
    columns are the inputs.  The input array will order-wise coorespond to the first
    n-1 columns of the data array.
    
    @return {Object}
    
    returns {A, Beta, variance, prediction}
     */
  };

  exports.multiRegression = multiRegression;

}).call(this);
